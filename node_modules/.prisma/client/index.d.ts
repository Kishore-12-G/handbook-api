
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Chatbot
 * 
 */
export type Chatbot = $Result.DefaultSelection<Prisma.$ChatbotPayload>
/**
 * Model Todo
 * 
 */
export type Todo = $Result.DefaultSelection<Prisma.$TodoPayload>
/**
 * Model Allowance
 * 
 */
export type Allowance = $Result.DefaultSelection<Prisma.$AllowancePayload>
/**
 * Model TDClaimChecklist
 * 
 */
export type TDClaimChecklist = $Result.DefaultSelection<Prisma.$TDClaimChecklistPayload>
/**
 * Model TDRates
 * 
 */
export type TDRates = $Result.DefaultSelection<Prisma.$TDRatesPayload>
/**
 * Model TDRules
 * 
 */
export type TDRules = $Result.DefaultSelection<Prisma.$TDRulesPayload>
/**
 * Model UpskillCertification
 * 
 */
export type UpskillCertification = $Result.DefaultSelection<Prisma.$UpskillCertificationPayload>
/**
 * Model UpSkillEnrollment
 * 
 */
export type UpSkillEnrollment = $Result.DefaultSelection<Prisma.$UpSkillEnrollmentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const VerificationStatus: {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

export type VerificationStatus = (typeof VerificationStatus)[keyof typeof VerificationStatus]


export const InterestStatus: {
  PENDING: 'PENDING',
  INTERESTED: 'INTERESTED',
  NOT_INTERESTED: 'NOT_INTERESTED'
};

export type InterestStatus = (typeof InterestStatus)[keyof typeof InterestStatus]

}

export type VerificationStatus = $Enums.VerificationStatus

export const VerificationStatus: typeof $Enums.VerificationStatus

export type InterestStatus = $Enums.InterestStatus

export const InterestStatus: typeof $Enums.InterestStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatbot`: Exposes CRUD operations for the **Chatbot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chatbots
    * const chatbots = await prisma.chatbot.findMany()
    * ```
    */
  get chatbot(): Prisma.ChatbotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.todo`: Exposes CRUD operations for the **Todo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Todos
    * const todos = await prisma.todo.findMany()
    * ```
    */
  get todo(): Prisma.TodoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.allowance`: Exposes CRUD operations for the **Allowance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allowances
    * const allowances = await prisma.allowance.findMany()
    * ```
    */
  get allowance(): Prisma.AllowanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tDClaimChecklist`: Exposes CRUD operations for the **TDClaimChecklist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TDClaimChecklists
    * const tDClaimChecklists = await prisma.tDClaimChecklist.findMany()
    * ```
    */
  get tDClaimChecklist(): Prisma.TDClaimChecklistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tDRates`: Exposes CRUD operations for the **TDRates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TDRates
    * const tDRates = await prisma.tDRates.findMany()
    * ```
    */
  get tDRates(): Prisma.TDRatesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tDRules`: Exposes CRUD operations for the **TDRules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TDRules
    * const tDRules = await prisma.tDRules.findMany()
    * ```
    */
  get tDRules(): Prisma.TDRulesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.upskillCertification`: Exposes CRUD operations for the **UpskillCertification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UpskillCertifications
    * const upskillCertifications = await prisma.upskillCertification.findMany()
    * ```
    */
  get upskillCertification(): Prisma.UpskillCertificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.upSkillEnrollment`: Exposes CRUD operations for the **UpSkillEnrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UpSkillEnrollments
    * const upSkillEnrollments = await prisma.upSkillEnrollment.findMany()
    * ```
    */
  get upSkillEnrollment(): Prisma.UpSkillEnrollmentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Chatbot: 'Chatbot',
    Todo: 'Todo',
    Allowance: 'Allowance',
    TDClaimChecklist: 'TDClaimChecklist',
    TDRates: 'TDRates',
    TDRules: 'TDRules',
    UpskillCertification: 'UpskillCertification',
    UpSkillEnrollment: 'UpSkillEnrollment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "chatbot" | "todo" | "allowance" | "tDClaimChecklist" | "tDRates" | "tDRules" | "upskillCertification" | "upSkillEnrollment"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Chatbot: {
        payload: Prisma.$ChatbotPayload<ExtArgs>
        fields: Prisma.ChatbotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatbotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatbotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload>
          }
          findFirst: {
            args: Prisma.ChatbotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatbotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload>
          }
          findMany: {
            args: Prisma.ChatbotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload>[]
          }
          create: {
            args: Prisma.ChatbotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload>
          }
          createMany: {
            args: Prisma.ChatbotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChatbotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload>
          }
          update: {
            args: Prisma.ChatbotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload>
          }
          deleteMany: {
            args: Prisma.ChatbotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatbotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatbotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotPayload>
          }
          aggregate: {
            args: Prisma.ChatbotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatbot>
          }
          groupBy: {
            args: Prisma.ChatbotGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatbotGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ChatbotFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ChatbotAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ChatbotCountArgs<ExtArgs>
            result: $Utils.Optional<ChatbotCountAggregateOutputType> | number
          }
        }
      }
      Todo: {
        payload: Prisma.$TodoPayload<ExtArgs>
        fields: Prisma.TodoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TodoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TodoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload>
          }
          findFirst: {
            args: Prisma.TodoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TodoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload>
          }
          findMany: {
            args: Prisma.TodoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload>[]
          }
          create: {
            args: Prisma.TodoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload>
          }
          createMany: {
            args: Prisma.TodoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TodoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload>
          }
          update: {
            args: Prisma.TodoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload>
          }
          deleteMany: {
            args: Prisma.TodoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TodoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TodoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodoPayload>
          }
          aggregate: {
            args: Prisma.TodoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTodo>
          }
          groupBy: {
            args: Prisma.TodoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TodoGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TodoFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TodoAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TodoCountArgs<ExtArgs>
            result: $Utils.Optional<TodoCountAggregateOutputType> | number
          }
        }
      }
      Allowance: {
        payload: Prisma.$AllowancePayload<ExtArgs>
        fields: Prisma.AllowanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllowanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllowanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload>
          }
          findFirst: {
            args: Prisma.AllowanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllowanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload>
          }
          findMany: {
            args: Prisma.AllowanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload>[]
          }
          create: {
            args: Prisma.AllowanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload>
          }
          createMany: {
            args: Prisma.AllowanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AllowanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload>
          }
          update: {
            args: Prisma.AllowanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload>
          }
          deleteMany: {
            args: Prisma.AllowanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllowanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AllowanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllowancePayload>
          }
          aggregate: {
            args: Prisma.AllowanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAllowance>
          }
          groupBy: {
            args: Prisma.AllowanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllowanceGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AllowanceFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AllowanceAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AllowanceCountArgs<ExtArgs>
            result: $Utils.Optional<AllowanceCountAggregateOutputType> | number
          }
        }
      }
      TDClaimChecklist: {
        payload: Prisma.$TDClaimChecklistPayload<ExtArgs>
        fields: Prisma.TDClaimChecklistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TDClaimChecklistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TDClaimChecklistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload>
          }
          findFirst: {
            args: Prisma.TDClaimChecklistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TDClaimChecklistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload>
          }
          findMany: {
            args: Prisma.TDClaimChecklistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload>[]
          }
          create: {
            args: Prisma.TDClaimChecklistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload>
          }
          createMany: {
            args: Prisma.TDClaimChecklistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TDClaimChecklistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload>
          }
          update: {
            args: Prisma.TDClaimChecklistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload>
          }
          deleteMany: {
            args: Prisma.TDClaimChecklistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TDClaimChecklistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TDClaimChecklistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDClaimChecklistPayload>
          }
          aggregate: {
            args: Prisma.TDClaimChecklistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTDClaimChecklist>
          }
          groupBy: {
            args: Prisma.TDClaimChecklistGroupByArgs<ExtArgs>
            result: $Utils.Optional<TDClaimChecklistGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TDClaimChecklistFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TDClaimChecklistAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TDClaimChecklistCountArgs<ExtArgs>
            result: $Utils.Optional<TDClaimChecklistCountAggregateOutputType> | number
          }
        }
      }
      TDRates: {
        payload: Prisma.$TDRatesPayload<ExtArgs>
        fields: Prisma.TDRatesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TDRatesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TDRatesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload>
          }
          findFirst: {
            args: Prisma.TDRatesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TDRatesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload>
          }
          findMany: {
            args: Prisma.TDRatesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload>[]
          }
          create: {
            args: Prisma.TDRatesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload>
          }
          createMany: {
            args: Prisma.TDRatesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TDRatesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload>
          }
          update: {
            args: Prisma.TDRatesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload>
          }
          deleteMany: {
            args: Prisma.TDRatesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TDRatesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TDRatesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRatesPayload>
          }
          aggregate: {
            args: Prisma.TDRatesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTDRates>
          }
          groupBy: {
            args: Prisma.TDRatesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TDRatesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TDRatesFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TDRatesAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TDRatesCountArgs<ExtArgs>
            result: $Utils.Optional<TDRatesCountAggregateOutputType> | number
          }
        }
      }
      TDRules: {
        payload: Prisma.$TDRulesPayload<ExtArgs>
        fields: Prisma.TDRulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TDRulesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TDRulesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload>
          }
          findFirst: {
            args: Prisma.TDRulesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TDRulesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload>
          }
          findMany: {
            args: Prisma.TDRulesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload>[]
          }
          create: {
            args: Prisma.TDRulesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload>
          }
          createMany: {
            args: Prisma.TDRulesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TDRulesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload>
          }
          update: {
            args: Prisma.TDRulesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload>
          }
          deleteMany: {
            args: Prisma.TDRulesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TDRulesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TDRulesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TDRulesPayload>
          }
          aggregate: {
            args: Prisma.TDRulesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTDRules>
          }
          groupBy: {
            args: Prisma.TDRulesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TDRulesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TDRulesFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TDRulesAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TDRulesCountArgs<ExtArgs>
            result: $Utils.Optional<TDRulesCountAggregateOutputType> | number
          }
        }
      }
      UpskillCertification: {
        payload: Prisma.$UpskillCertificationPayload<ExtArgs>
        fields: Prisma.UpskillCertificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UpskillCertificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UpskillCertificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload>
          }
          findFirst: {
            args: Prisma.UpskillCertificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UpskillCertificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload>
          }
          findMany: {
            args: Prisma.UpskillCertificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload>[]
          }
          create: {
            args: Prisma.UpskillCertificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload>
          }
          createMany: {
            args: Prisma.UpskillCertificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UpskillCertificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload>
          }
          update: {
            args: Prisma.UpskillCertificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload>
          }
          deleteMany: {
            args: Prisma.UpskillCertificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UpskillCertificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UpskillCertificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpskillCertificationPayload>
          }
          aggregate: {
            args: Prisma.UpskillCertificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUpskillCertification>
          }
          groupBy: {
            args: Prisma.UpskillCertificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UpskillCertificationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UpskillCertificationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UpskillCertificationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UpskillCertificationCountArgs<ExtArgs>
            result: $Utils.Optional<UpskillCertificationCountAggregateOutputType> | number
          }
        }
      }
      UpSkillEnrollment: {
        payload: Prisma.$UpSkillEnrollmentPayload<ExtArgs>
        fields: Prisma.UpSkillEnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UpSkillEnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UpSkillEnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload>
          }
          findFirst: {
            args: Prisma.UpSkillEnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UpSkillEnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload>
          }
          findMany: {
            args: Prisma.UpSkillEnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload>[]
          }
          create: {
            args: Prisma.UpSkillEnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload>
          }
          createMany: {
            args: Prisma.UpSkillEnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UpSkillEnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload>
          }
          update: {
            args: Prisma.UpSkillEnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.UpSkillEnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UpSkillEnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UpSkillEnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpSkillEnrollmentPayload>
          }
          aggregate: {
            args: Prisma.UpSkillEnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUpSkillEnrollment>
          }
          groupBy: {
            args: Prisma.UpSkillEnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UpSkillEnrollmentGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UpSkillEnrollmentFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UpSkillEnrollmentAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UpSkillEnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<UpSkillEnrollmentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    chatbot?: ChatbotOmit
    todo?: TodoOmit
    allowance?: AllowanceOmit
    tDClaimChecklist?: TDClaimChecklistOmit
    tDRates?: TDRatesOmit
    tDRules?: TDRulesOmit
    upskillCertification?: UpskillCertificationOmit
    upSkillEnrollment?: UpSkillEnrollmentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    todos: number
    allowances: number
    enrollments: number
    chatbots: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    todos?: boolean | UserCountOutputTypeCountTodosArgs
    allowances?: boolean | UserCountOutputTypeCountAllowancesArgs
    enrollments?: boolean | UserCountOutputTypeCountEnrollmentsArgs
    chatbots?: boolean | UserCountOutputTypeCountChatbotsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTodosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TodoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAllowancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllowanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UpSkillEnrollmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatbotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatbotWhereInput
  }


  /**
   * Count Type UpskillCertificationCountOutputType
   */

  export type UpskillCertificationCountOutputType = {
    upskillEnrollments: number
  }

  export type UpskillCertificationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    upskillEnrollments?: boolean | UpskillCertificationCountOutputTypeCountUpskillEnrollmentsArgs
  }

  // Custom InputTypes
  /**
   * UpskillCertificationCountOutputType without action
   */
  export type UpskillCertificationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertificationCountOutputType
     */
    select?: UpskillCertificationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UpskillCertificationCountOutputType without action
   */
  export type UpskillCertificationCountOutputTypeCountUpskillEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UpSkillEnrollmentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    userId: string | null
    username: string | null
    email: string | null
    password: string | null
    armyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    username: string | null
    email: string | null
    password: string | null
    armyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    userId: number
    username: number
    email: number
    password: number
    armyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    userId?: true
    username?: true
    email?: true
    password?: true
    armyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    userId?: true
    username?: true
    email?: true
    password?: true
    armyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    userId?: true
    username?: true
    email?: true
    password?: true
    armyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    userId: string | null
    username: string | null
    email: string | null
    password: string | null
    armyId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    armyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    todos?: boolean | User$todosArgs<ExtArgs>
    allowances?: boolean | User$allowancesArgs<ExtArgs>
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    chatbots?: boolean | User$chatbotsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    userId?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    armyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "username" | "email" | "password" | "armyId" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    todos?: boolean | User$todosArgs<ExtArgs>
    allowances?: boolean | User$allowancesArgs<ExtArgs>
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    chatbots?: boolean | User$chatbotsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      todos: Prisma.$TodoPayload<ExtArgs>[]
      allowances: Prisma.$AllowancePayload<ExtArgs>[]
      enrollments: Prisma.$UpSkillEnrollmentPayload<ExtArgs>[]
      chatbots: Prisma.$ChatbotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      username: string | null
      email: string | null
      password: string | null
      armyId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    todos<T extends User$todosArgs<ExtArgs> = {}>(args?: Subset<T, User$todosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    allowances<T extends User$allowancesArgs<ExtArgs> = {}>(args?: Subset<T, User$allowancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    enrollments<T extends User$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chatbots<T extends User$chatbotsArgs<ExtArgs> = {}>(args?: Subset<T, User$chatbotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly userId: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly armyId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.todos
   */
  export type User$todosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    where?: TodoWhereInput
    orderBy?: TodoOrderByWithRelationInput | TodoOrderByWithRelationInput[]
    cursor?: TodoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TodoScalarFieldEnum | TodoScalarFieldEnum[]
  }

  /**
   * User.allowances
   */
  export type User$allowancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    where?: AllowanceWhereInput
    orderBy?: AllowanceOrderByWithRelationInput | AllowanceOrderByWithRelationInput[]
    cursor?: AllowanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllowanceScalarFieldEnum | AllowanceScalarFieldEnum[]
  }

  /**
   * User.enrollments
   */
  export type User$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    where?: UpSkillEnrollmentWhereInput
    orderBy?: UpSkillEnrollmentOrderByWithRelationInput | UpSkillEnrollmentOrderByWithRelationInput[]
    cursor?: UpSkillEnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UpSkillEnrollmentScalarFieldEnum | UpSkillEnrollmentScalarFieldEnum[]
  }

  /**
   * User.chatbots
   */
  export type User$chatbotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    where?: ChatbotWhereInput
    orderBy?: ChatbotOrderByWithRelationInput | ChatbotOrderByWithRelationInput[]
    cursor?: ChatbotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatbotScalarFieldEnum | ChatbotScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Chatbot
   */

  export type AggregateChatbot = {
    _count: ChatbotCountAggregateOutputType | null
    _min: ChatbotMinAggregateOutputType | null
    _max: ChatbotMaxAggregateOutputType | null
  }

  export type ChatbotMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    query: string | null
    response: string | null
    createdAt: Date | null
  }

  export type ChatbotMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    query: string | null
    response: string | null
    createdAt: Date | null
  }

  export type ChatbotCountAggregateOutputType = {
    id: number
    userId: number
    sessionId: number
    query: number
    response: number
    createdAt: number
    _all: number
  }


  export type ChatbotMinAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    query?: true
    response?: true
    createdAt?: true
  }

  export type ChatbotMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    query?: true
    response?: true
    createdAt?: true
  }

  export type ChatbotCountAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    query?: true
    response?: true
    createdAt?: true
    _all?: true
  }

  export type ChatbotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chatbot to aggregate.
     */
    where?: ChatbotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chatbots to fetch.
     */
    orderBy?: ChatbotOrderByWithRelationInput | ChatbotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatbotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chatbots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chatbots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chatbots
    **/
    _count?: true | ChatbotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatbotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatbotMaxAggregateInputType
  }

  export type GetChatbotAggregateType<T extends ChatbotAggregateArgs> = {
        [P in keyof T & keyof AggregateChatbot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatbot[P]>
      : GetScalarType<T[P], AggregateChatbot[P]>
  }




  export type ChatbotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatbotWhereInput
    orderBy?: ChatbotOrderByWithAggregationInput | ChatbotOrderByWithAggregationInput[]
    by: ChatbotScalarFieldEnum[] | ChatbotScalarFieldEnum
    having?: ChatbotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatbotCountAggregateInputType | true
    _min?: ChatbotMinAggregateInputType
    _max?: ChatbotMaxAggregateInputType
  }

  export type ChatbotGroupByOutputType = {
    id: string
    userId: string | null
    sessionId: string
    query: string
    response: string
    createdAt: Date
    _count: ChatbotCountAggregateOutputType | null
    _min: ChatbotMinAggregateOutputType | null
    _max: ChatbotMaxAggregateOutputType | null
  }

  type GetChatbotGroupByPayload<T extends ChatbotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatbotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatbotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatbotGroupByOutputType[P]>
            : GetScalarType<T[P], ChatbotGroupByOutputType[P]>
        }
      >
    >


  export type ChatbotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    query?: boolean
    response?: boolean
    createdAt?: boolean
    user?: boolean | Chatbot$userArgs<ExtArgs>
  }, ExtArgs["result"]["chatbot"]>



  export type ChatbotSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    query?: boolean
    response?: boolean
    createdAt?: boolean
  }

  export type ChatbotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sessionId" | "query" | "response" | "createdAt", ExtArgs["result"]["chatbot"]>
  export type ChatbotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Chatbot$userArgs<ExtArgs>
  }

  export type $ChatbotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chatbot"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      sessionId: string
      query: string
      response: string
      createdAt: Date
    }, ExtArgs["result"]["chatbot"]>
    composites: {}
  }

  type ChatbotGetPayload<S extends boolean | null | undefined | ChatbotDefaultArgs> = $Result.GetResult<Prisma.$ChatbotPayload, S>

  type ChatbotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatbotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatbotCountAggregateInputType | true
    }

  export interface ChatbotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chatbot'], meta: { name: 'Chatbot' } }
    /**
     * Find zero or one Chatbot that matches the filter.
     * @param {ChatbotFindUniqueArgs} args - Arguments to find a Chatbot
     * @example
     * // Get one Chatbot
     * const chatbot = await prisma.chatbot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatbotFindUniqueArgs>(args: SelectSubset<T, ChatbotFindUniqueArgs<ExtArgs>>): Prisma__ChatbotClient<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chatbot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatbotFindUniqueOrThrowArgs} args - Arguments to find a Chatbot
     * @example
     * // Get one Chatbot
     * const chatbot = await prisma.chatbot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatbotFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatbotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatbotClient<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chatbot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotFindFirstArgs} args - Arguments to find a Chatbot
     * @example
     * // Get one Chatbot
     * const chatbot = await prisma.chatbot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatbotFindFirstArgs>(args?: SelectSubset<T, ChatbotFindFirstArgs<ExtArgs>>): Prisma__ChatbotClient<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chatbot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotFindFirstOrThrowArgs} args - Arguments to find a Chatbot
     * @example
     * // Get one Chatbot
     * const chatbot = await prisma.chatbot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatbotFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatbotFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatbotClient<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chatbots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chatbots
     * const chatbots = await prisma.chatbot.findMany()
     * 
     * // Get first 10 Chatbots
     * const chatbots = await prisma.chatbot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatbotWithIdOnly = await prisma.chatbot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatbotFindManyArgs>(args?: SelectSubset<T, ChatbotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chatbot.
     * @param {ChatbotCreateArgs} args - Arguments to create a Chatbot.
     * @example
     * // Create one Chatbot
     * const Chatbot = await prisma.chatbot.create({
     *   data: {
     *     // ... data to create a Chatbot
     *   }
     * })
     * 
     */
    create<T extends ChatbotCreateArgs>(args: SelectSubset<T, ChatbotCreateArgs<ExtArgs>>): Prisma__ChatbotClient<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chatbots.
     * @param {ChatbotCreateManyArgs} args - Arguments to create many Chatbots.
     * @example
     * // Create many Chatbots
     * const chatbot = await prisma.chatbot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatbotCreateManyArgs>(args?: SelectSubset<T, ChatbotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chatbot.
     * @param {ChatbotDeleteArgs} args - Arguments to delete one Chatbot.
     * @example
     * // Delete one Chatbot
     * const Chatbot = await prisma.chatbot.delete({
     *   where: {
     *     // ... filter to delete one Chatbot
     *   }
     * })
     * 
     */
    delete<T extends ChatbotDeleteArgs>(args: SelectSubset<T, ChatbotDeleteArgs<ExtArgs>>): Prisma__ChatbotClient<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chatbot.
     * @param {ChatbotUpdateArgs} args - Arguments to update one Chatbot.
     * @example
     * // Update one Chatbot
     * const chatbot = await prisma.chatbot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatbotUpdateArgs>(args: SelectSubset<T, ChatbotUpdateArgs<ExtArgs>>): Prisma__ChatbotClient<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chatbots.
     * @param {ChatbotDeleteManyArgs} args - Arguments to filter Chatbots to delete.
     * @example
     * // Delete a few Chatbots
     * const { count } = await prisma.chatbot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatbotDeleteManyArgs>(args?: SelectSubset<T, ChatbotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chatbots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chatbots
     * const chatbot = await prisma.chatbot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatbotUpdateManyArgs>(args: SelectSubset<T, ChatbotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chatbot.
     * @param {ChatbotUpsertArgs} args - Arguments to update or create a Chatbot.
     * @example
     * // Update or create a Chatbot
     * const chatbot = await prisma.chatbot.upsert({
     *   create: {
     *     // ... data to create a Chatbot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chatbot we want to update
     *   }
     * })
     */
    upsert<T extends ChatbotUpsertArgs>(args: SelectSubset<T, ChatbotUpsertArgs<ExtArgs>>): Prisma__ChatbotClient<$Result.GetResult<Prisma.$ChatbotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chatbots that matches the filter.
     * @param {ChatbotFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const chatbot = await prisma.chatbot.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ChatbotFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Chatbot.
     * @param {ChatbotAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const chatbot = await prisma.chatbot.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ChatbotAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Chatbots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotCountArgs} args - Arguments to filter Chatbots to count.
     * @example
     * // Count the number of Chatbots
     * const count = await prisma.chatbot.count({
     *   where: {
     *     // ... the filter for the Chatbots we want to count
     *   }
     * })
    **/
    count<T extends ChatbotCountArgs>(
      args?: Subset<T, ChatbotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatbotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chatbot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatbotAggregateArgs>(args: Subset<T, ChatbotAggregateArgs>): Prisma.PrismaPromise<GetChatbotAggregateType<T>>

    /**
     * Group by Chatbot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatbotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatbotGroupByArgs['orderBy'] }
        : { orderBy?: ChatbotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatbotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatbotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chatbot model
   */
  readonly fields: ChatbotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chatbot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatbotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Chatbot$userArgs<ExtArgs> = {}>(args?: Subset<T, Chatbot$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chatbot model
   */
  interface ChatbotFieldRefs {
    readonly id: FieldRef<"Chatbot", 'String'>
    readonly userId: FieldRef<"Chatbot", 'String'>
    readonly sessionId: FieldRef<"Chatbot", 'String'>
    readonly query: FieldRef<"Chatbot", 'String'>
    readonly response: FieldRef<"Chatbot", 'String'>
    readonly createdAt: FieldRef<"Chatbot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Chatbot findUnique
   */
  export type ChatbotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * Filter, which Chatbot to fetch.
     */
    where: ChatbotWhereUniqueInput
  }

  /**
   * Chatbot findUniqueOrThrow
   */
  export type ChatbotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * Filter, which Chatbot to fetch.
     */
    where: ChatbotWhereUniqueInput
  }

  /**
   * Chatbot findFirst
   */
  export type ChatbotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * Filter, which Chatbot to fetch.
     */
    where?: ChatbotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chatbots to fetch.
     */
    orderBy?: ChatbotOrderByWithRelationInput | ChatbotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chatbots.
     */
    cursor?: ChatbotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chatbots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chatbots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chatbots.
     */
    distinct?: ChatbotScalarFieldEnum | ChatbotScalarFieldEnum[]
  }

  /**
   * Chatbot findFirstOrThrow
   */
  export type ChatbotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * Filter, which Chatbot to fetch.
     */
    where?: ChatbotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chatbots to fetch.
     */
    orderBy?: ChatbotOrderByWithRelationInput | ChatbotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chatbots.
     */
    cursor?: ChatbotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chatbots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chatbots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chatbots.
     */
    distinct?: ChatbotScalarFieldEnum | ChatbotScalarFieldEnum[]
  }

  /**
   * Chatbot findMany
   */
  export type ChatbotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * Filter, which Chatbots to fetch.
     */
    where?: ChatbotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chatbots to fetch.
     */
    orderBy?: ChatbotOrderByWithRelationInput | ChatbotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chatbots.
     */
    cursor?: ChatbotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chatbots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chatbots.
     */
    skip?: number
    distinct?: ChatbotScalarFieldEnum | ChatbotScalarFieldEnum[]
  }

  /**
   * Chatbot create
   */
  export type ChatbotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * The data needed to create a Chatbot.
     */
    data: XOR<ChatbotCreateInput, ChatbotUncheckedCreateInput>
  }

  /**
   * Chatbot createMany
   */
  export type ChatbotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chatbots.
     */
    data: ChatbotCreateManyInput | ChatbotCreateManyInput[]
  }

  /**
   * Chatbot update
   */
  export type ChatbotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * The data needed to update a Chatbot.
     */
    data: XOR<ChatbotUpdateInput, ChatbotUncheckedUpdateInput>
    /**
     * Choose, which Chatbot to update.
     */
    where: ChatbotWhereUniqueInput
  }

  /**
   * Chatbot updateMany
   */
  export type ChatbotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chatbots.
     */
    data: XOR<ChatbotUpdateManyMutationInput, ChatbotUncheckedUpdateManyInput>
    /**
     * Filter which Chatbots to update
     */
    where?: ChatbotWhereInput
    /**
     * Limit how many Chatbots to update.
     */
    limit?: number
  }

  /**
   * Chatbot upsert
   */
  export type ChatbotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * The filter to search for the Chatbot to update in case it exists.
     */
    where: ChatbotWhereUniqueInput
    /**
     * In case the Chatbot found by the `where` argument doesn't exist, create a new Chatbot with this data.
     */
    create: XOR<ChatbotCreateInput, ChatbotUncheckedCreateInput>
    /**
     * In case the Chatbot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatbotUpdateInput, ChatbotUncheckedUpdateInput>
  }

  /**
   * Chatbot delete
   */
  export type ChatbotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
    /**
     * Filter which Chatbot to delete.
     */
    where: ChatbotWhereUniqueInput
  }

  /**
   * Chatbot deleteMany
   */
  export type ChatbotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chatbots to delete
     */
    where?: ChatbotWhereInput
    /**
     * Limit how many Chatbots to delete.
     */
    limit?: number
  }

  /**
   * Chatbot findRaw
   */
  export type ChatbotFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Chatbot aggregateRaw
   */
  export type ChatbotAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Chatbot.user
   */
  export type Chatbot$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Chatbot without action
   */
  export type ChatbotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatbot
     */
    select?: ChatbotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatbot
     */
    omit?: ChatbotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotInclude<ExtArgs> | null
  }


  /**
   * Model Todo
   */

  export type AggregateTodo = {
    _count: TodoCountAggregateOutputType | null
    _min: TodoMinAggregateOutputType | null
    _max: TodoMaxAggregateOutputType | null
  }

  export type TodoMinAggregateOutputType = {
    id: string | null
    todoId: string | null
    userId: string | null
    activity: string | null
    description: string | null
    status: string | null
    priority: string | null
    dueDate: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TodoMaxAggregateOutputType = {
    id: string | null
    todoId: string | null
    userId: string | null
    activity: string | null
    description: string | null
    status: string | null
    priority: string | null
    dueDate: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TodoCountAggregateOutputType = {
    id: number
    todoId: number
    userId: number
    activity: number
    description: number
    status: number
    priority: number
    dueDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TodoMinAggregateInputType = {
    id?: true
    todoId?: true
    userId?: true
    activity?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TodoMaxAggregateInputType = {
    id?: true
    todoId?: true
    userId?: true
    activity?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TodoCountAggregateInputType = {
    id?: true
    todoId?: true
    userId?: true
    activity?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TodoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Todo to aggregate.
     */
    where?: TodoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos to fetch.
     */
    orderBy?: TodoOrderByWithRelationInput | TodoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TodoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Todos
    **/
    _count?: true | TodoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TodoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TodoMaxAggregateInputType
  }

  export type GetTodoAggregateType<T extends TodoAggregateArgs> = {
        [P in keyof T & keyof AggregateTodo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodo[P]>
      : GetScalarType<T[P], AggregateTodo[P]>
  }




  export type TodoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TodoWhereInput
    orderBy?: TodoOrderByWithAggregationInput | TodoOrderByWithAggregationInput[]
    by: TodoScalarFieldEnum[] | TodoScalarFieldEnum
    having?: TodoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TodoCountAggregateInputType | true
    _min?: TodoMinAggregateInputType
    _max?: TodoMaxAggregateInputType
  }

  export type TodoGroupByOutputType = {
    id: string
    todoId: string | null
    userId: string
    activity: string | null
    description: string | null
    status: string | null
    priority: string | null
    dueDate: string | null
    createdAt: Date
    updatedAt: Date
    _count: TodoCountAggregateOutputType | null
    _min: TodoMinAggregateOutputType | null
    _max: TodoMaxAggregateOutputType | null
  }

  type GetTodoGroupByPayload<T extends TodoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TodoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TodoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TodoGroupByOutputType[P]>
            : GetScalarType<T[P], TodoGroupByOutputType[P]>
        }
      >
    >


  export type TodoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    todoId?: boolean
    userId?: boolean
    activity?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["todo"]>



  export type TodoSelectScalar = {
    id?: boolean
    todoId?: boolean
    userId?: boolean
    activity?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TodoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "todoId" | "userId" | "activity" | "description" | "status" | "priority" | "dueDate" | "createdAt" | "updatedAt", ExtArgs["result"]["todo"]>
  export type TodoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TodoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Todo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      todoId: string | null
      userId: string
      activity: string | null
      description: string | null
      status: string | null
      priority: string | null
      dueDate: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["todo"]>
    composites: {}
  }

  type TodoGetPayload<S extends boolean | null | undefined | TodoDefaultArgs> = $Result.GetResult<Prisma.$TodoPayload, S>

  type TodoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TodoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TodoCountAggregateInputType | true
    }

  export interface TodoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Todo'], meta: { name: 'Todo' } }
    /**
     * Find zero or one Todo that matches the filter.
     * @param {TodoFindUniqueArgs} args - Arguments to find a Todo
     * @example
     * // Get one Todo
     * const todo = await prisma.todo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TodoFindUniqueArgs>(args: SelectSubset<T, TodoFindUniqueArgs<ExtArgs>>): Prisma__TodoClient<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Todo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TodoFindUniqueOrThrowArgs} args - Arguments to find a Todo
     * @example
     * // Get one Todo
     * const todo = await prisma.todo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TodoFindUniqueOrThrowArgs>(args: SelectSubset<T, TodoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TodoClient<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Todo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoFindFirstArgs} args - Arguments to find a Todo
     * @example
     * // Get one Todo
     * const todo = await prisma.todo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TodoFindFirstArgs>(args?: SelectSubset<T, TodoFindFirstArgs<ExtArgs>>): Prisma__TodoClient<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Todo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoFindFirstOrThrowArgs} args - Arguments to find a Todo
     * @example
     * // Get one Todo
     * const todo = await prisma.todo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TodoFindFirstOrThrowArgs>(args?: SelectSubset<T, TodoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TodoClient<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Todos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Todos
     * const todos = await prisma.todo.findMany()
     * 
     * // Get first 10 Todos
     * const todos = await prisma.todo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todoWithIdOnly = await prisma.todo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TodoFindManyArgs>(args?: SelectSubset<T, TodoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Todo.
     * @param {TodoCreateArgs} args - Arguments to create a Todo.
     * @example
     * // Create one Todo
     * const Todo = await prisma.todo.create({
     *   data: {
     *     // ... data to create a Todo
     *   }
     * })
     * 
     */
    create<T extends TodoCreateArgs>(args: SelectSubset<T, TodoCreateArgs<ExtArgs>>): Prisma__TodoClient<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Todos.
     * @param {TodoCreateManyArgs} args - Arguments to create many Todos.
     * @example
     * // Create many Todos
     * const todo = await prisma.todo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TodoCreateManyArgs>(args?: SelectSubset<T, TodoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Todo.
     * @param {TodoDeleteArgs} args - Arguments to delete one Todo.
     * @example
     * // Delete one Todo
     * const Todo = await prisma.todo.delete({
     *   where: {
     *     // ... filter to delete one Todo
     *   }
     * })
     * 
     */
    delete<T extends TodoDeleteArgs>(args: SelectSubset<T, TodoDeleteArgs<ExtArgs>>): Prisma__TodoClient<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Todo.
     * @param {TodoUpdateArgs} args - Arguments to update one Todo.
     * @example
     * // Update one Todo
     * const todo = await prisma.todo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TodoUpdateArgs>(args: SelectSubset<T, TodoUpdateArgs<ExtArgs>>): Prisma__TodoClient<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Todos.
     * @param {TodoDeleteManyArgs} args - Arguments to filter Todos to delete.
     * @example
     * // Delete a few Todos
     * const { count } = await prisma.todo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TodoDeleteManyArgs>(args?: SelectSubset<T, TodoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Todos
     * const todo = await prisma.todo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TodoUpdateManyArgs>(args: SelectSubset<T, TodoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Todo.
     * @param {TodoUpsertArgs} args - Arguments to update or create a Todo.
     * @example
     * // Update or create a Todo
     * const todo = await prisma.todo.upsert({
     *   create: {
     *     // ... data to create a Todo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Todo we want to update
     *   }
     * })
     */
    upsert<T extends TodoUpsertArgs>(args: SelectSubset<T, TodoUpsertArgs<ExtArgs>>): Prisma__TodoClient<$Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Todos that matches the filter.
     * @param {TodoFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const todo = await prisma.todo.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TodoFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Todo.
     * @param {TodoAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const todo = await prisma.todo.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TodoAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoCountArgs} args - Arguments to filter Todos to count.
     * @example
     * // Count the number of Todos
     * const count = await prisma.todo.count({
     *   where: {
     *     // ... the filter for the Todos we want to count
     *   }
     * })
    **/
    count<T extends TodoCountArgs>(
      args?: Subset<T, TodoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Todo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodoAggregateArgs>(args: Subset<T, TodoAggregateArgs>): Prisma.PrismaPromise<GetTodoAggregateType<T>>

    /**
     * Group by Todo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodoGroupByArgs['orderBy'] }
        : { orderBy?: TodoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Todo model
   */
  readonly fields: TodoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Todo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TodoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Todo model
   */
  interface TodoFieldRefs {
    readonly id: FieldRef<"Todo", 'String'>
    readonly todoId: FieldRef<"Todo", 'String'>
    readonly userId: FieldRef<"Todo", 'String'>
    readonly activity: FieldRef<"Todo", 'String'>
    readonly description: FieldRef<"Todo", 'String'>
    readonly status: FieldRef<"Todo", 'String'>
    readonly priority: FieldRef<"Todo", 'String'>
    readonly dueDate: FieldRef<"Todo", 'String'>
    readonly createdAt: FieldRef<"Todo", 'DateTime'>
    readonly updatedAt: FieldRef<"Todo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Todo findUnique
   */
  export type TodoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * Filter, which Todo to fetch.
     */
    where: TodoWhereUniqueInput
  }

  /**
   * Todo findUniqueOrThrow
   */
  export type TodoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * Filter, which Todo to fetch.
     */
    where: TodoWhereUniqueInput
  }

  /**
   * Todo findFirst
   */
  export type TodoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * Filter, which Todo to fetch.
     */
    where?: TodoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos to fetch.
     */
    orderBy?: TodoOrderByWithRelationInput | TodoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Todos.
     */
    cursor?: TodoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Todos.
     */
    distinct?: TodoScalarFieldEnum | TodoScalarFieldEnum[]
  }

  /**
   * Todo findFirstOrThrow
   */
  export type TodoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * Filter, which Todo to fetch.
     */
    where?: TodoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos to fetch.
     */
    orderBy?: TodoOrderByWithRelationInput | TodoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Todos.
     */
    cursor?: TodoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Todos.
     */
    distinct?: TodoScalarFieldEnum | TodoScalarFieldEnum[]
  }

  /**
   * Todo findMany
   */
  export type TodoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * Filter, which Todos to fetch.
     */
    where?: TodoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos to fetch.
     */
    orderBy?: TodoOrderByWithRelationInput | TodoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Todos.
     */
    cursor?: TodoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos.
     */
    skip?: number
    distinct?: TodoScalarFieldEnum | TodoScalarFieldEnum[]
  }

  /**
   * Todo create
   */
  export type TodoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * The data needed to create a Todo.
     */
    data: XOR<TodoCreateInput, TodoUncheckedCreateInput>
  }

  /**
   * Todo createMany
   */
  export type TodoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Todos.
     */
    data: TodoCreateManyInput | TodoCreateManyInput[]
  }

  /**
   * Todo update
   */
  export type TodoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * The data needed to update a Todo.
     */
    data: XOR<TodoUpdateInput, TodoUncheckedUpdateInput>
    /**
     * Choose, which Todo to update.
     */
    where: TodoWhereUniqueInput
  }

  /**
   * Todo updateMany
   */
  export type TodoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Todos.
     */
    data: XOR<TodoUpdateManyMutationInput, TodoUncheckedUpdateManyInput>
    /**
     * Filter which Todos to update
     */
    where?: TodoWhereInput
    /**
     * Limit how many Todos to update.
     */
    limit?: number
  }

  /**
   * Todo upsert
   */
  export type TodoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * The filter to search for the Todo to update in case it exists.
     */
    where: TodoWhereUniqueInput
    /**
     * In case the Todo found by the `where` argument doesn't exist, create a new Todo with this data.
     */
    create: XOR<TodoCreateInput, TodoUncheckedCreateInput>
    /**
     * In case the Todo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TodoUpdateInput, TodoUncheckedUpdateInput>
  }

  /**
   * Todo delete
   */
  export type TodoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
    /**
     * Filter which Todo to delete.
     */
    where: TodoWhereUniqueInput
  }

  /**
   * Todo deleteMany
   */
  export type TodoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Todos to delete
     */
    where?: TodoWhereInput
    /**
     * Limit how many Todos to delete.
     */
    limit?: number
  }

  /**
   * Todo findRaw
   */
  export type TodoFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Todo aggregateRaw
   */
  export type TodoAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Todo without action
   */
  export type TodoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Todo
     */
    select?: TodoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Todo
     */
    omit?: TodoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodoInclude<ExtArgs> | null
  }


  /**
   * Model Allowance
   */

  export type AggregateAllowance = {
    _count: AllowanceCountAggregateOutputType | null
    _avg: AllowanceAvgAggregateOutputType | null
    _sum: AllowanceSumAggregateOutputType | null
    _min: AllowanceMinAggregateOutputType | null
    _max: AllowanceMaxAggregateOutputType | null
  }

  export type AllowanceAvgAggregateOutputType = {
    basicPay: number | null
    distanceTravelled: number | null
  }

  export type AllowanceSumAggregateOutputType = {
    basicPay: number | null
    distanceTravelled: number | null
  }

  export type AllowanceMinAggregateOutputType = {
    id: string | null
    calculationId: string | null
    userId: string | null
    jobDesignation: string | null
    basicPay: number | null
    marriedStatus: boolean | null
    distanceTravelled: number | null
    calculatedAt: Date | null
  }

  export type AllowanceMaxAggregateOutputType = {
    id: string | null
    calculationId: string | null
    userId: string | null
    jobDesignation: string | null
    basicPay: number | null
    marriedStatus: boolean | null
    distanceTravelled: number | null
    calculatedAt: Date | null
  }

  export type AllowanceCountAggregateOutputType = {
    id: number
    calculationId: number
    userId: number
    jobDesignation: number
    basicPay: number
    marriedStatus: number
    distanceTravelled: number
    vehicleIncluded: number
    result: number
    calculatedAt: number
    _all: number
  }


  export type AllowanceAvgAggregateInputType = {
    basicPay?: true
    distanceTravelled?: true
  }

  export type AllowanceSumAggregateInputType = {
    basicPay?: true
    distanceTravelled?: true
  }

  export type AllowanceMinAggregateInputType = {
    id?: true
    calculationId?: true
    userId?: true
    jobDesignation?: true
    basicPay?: true
    marriedStatus?: true
    distanceTravelled?: true
    calculatedAt?: true
  }

  export type AllowanceMaxAggregateInputType = {
    id?: true
    calculationId?: true
    userId?: true
    jobDesignation?: true
    basicPay?: true
    marriedStatus?: true
    distanceTravelled?: true
    calculatedAt?: true
  }

  export type AllowanceCountAggregateInputType = {
    id?: true
    calculationId?: true
    userId?: true
    jobDesignation?: true
    basicPay?: true
    marriedStatus?: true
    distanceTravelled?: true
    vehicleIncluded?: true
    result?: true
    calculatedAt?: true
    _all?: true
  }

  export type AllowanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allowance to aggregate.
     */
    where?: AllowanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allowances to fetch.
     */
    orderBy?: AllowanceOrderByWithRelationInput | AllowanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllowanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allowances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allowances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Allowances
    **/
    _count?: true | AllowanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllowanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllowanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllowanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllowanceMaxAggregateInputType
  }

  export type GetAllowanceAggregateType<T extends AllowanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAllowance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllowance[P]>
      : GetScalarType<T[P], AggregateAllowance[P]>
  }




  export type AllowanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllowanceWhereInput
    orderBy?: AllowanceOrderByWithAggregationInput | AllowanceOrderByWithAggregationInput[]
    by: AllowanceScalarFieldEnum[] | AllowanceScalarFieldEnum
    having?: AllowanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllowanceCountAggregateInputType | true
    _avg?: AllowanceAvgAggregateInputType
    _sum?: AllowanceSumAggregateInputType
    _min?: AllowanceMinAggregateInputType
    _max?: AllowanceMaxAggregateInputType
  }

  export type AllowanceGroupByOutputType = {
    id: string
    calculationId: string | null
    userId: string
    jobDesignation: string | null
    basicPay: number | null
    marriedStatus: boolean | null
    distanceTravelled: number | null
    vehicleIncluded: JsonValue | null
    result: JsonValue | null
    calculatedAt: Date | null
    _count: AllowanceCountAggregateOutputType | null
    _avg: AllowanceAvgAggregateOutputType | null
    _sum: AllowanceSumAggregateOutputType | null
    _min: AllowanceMinAggregateOutputType | null
    _max: AllowanceMaxAggregateOutputType | null
  }

  type GetAllowanceGroupByPayload<T extends AllowanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllowanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllowanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllowanceGroupByOutputType[P]>
            : GetScalarType<T[P], AllowanceGroupByOutputType[P]>
        }
      >
    >


  export type AllowanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    calculationId?: boolean
    userId?: boolean
    jobDesignation?: boolean
    basicPay?: boolean
    marriedStatus?: boolean
    distanceTravelled?: boolean
    vehicleIncluded?: boolean
    result?: boolean
    calculatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allowance"]>



  export type AllowanceSelectScalar = {
    id?: boolean
    calculationId?: boolean
    userId?: boolean
    jobDesignation?: boolean
    basicPay?: boolean
    marriedStatus?: boolean
    distanceTravelled?: boolean
    vehicleIncluded?: boolean
    result?: boolean
    calculatedAt?: boolean
  }

  export type AllowanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "calculationId" | "userId" | "jobDesignation" | "basicPay" | "marriedStatus" | "distanceTravelled" | "vehicleIncluded" | "result" | "calculatedAt", ExtArgs["result"]["allowance"]>
  export type AllowanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AllowancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Allowance"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      calculationId: string | null
      userId: string
      jobDesignation: string | null
      basicPay: number | null
      marriedStatus: boolean | null
      distanceTravelled: number | null
      vehicleIncluded: Prisma.JsonValue | null
      result: Prisma.JsonValue | null
      calculatedAt: Date | null
    }, ExtArgs["result"]["allowance"]>
    composites: {}
  }

  type AllowanceGetPayload<S extends boolean | null | undefined | AllowanceDefaultArgs> = $Result.GetResult<Prisma.$AllowancePayload, S>

  type AllowanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AllowanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AllowanceCountAggregateInputType | true
    }

  export interface AllowanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Allowance'], meta: { name: 'Allowance' } }
    /**
     * Find zero or one Allowance that matches the filter.
     * @param {AllowanceFindUniqueArgs} args - Arguments to find a Allowance
     * @example
     * // Get one Allowance
     * const allowance = await prisma.allowance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllowanceFindUniqueArgs>(args: SelectSubset<T, AllowanceFindUniqueArgs<ExtArgs>>): Prisma__AllowanceClient<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Allowance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AllowanceFindUniqueOrThrowArgs} args - Arguments to find a Allowance
     * @example
     * // Get one Allowance
     * const allowance = await prisma.allowance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllowanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AllowanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllowanceClient<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Allowance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowanceFindFirstArgs} args - Arguments to find a Allowance
     * @example
     * // Get one Allowance
     * const allowance = await prisma.allowance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllowanceFindFirstArgs>(args?: SelectSubset<T, AllowanceFindFirstArgs<ExtArgs>>): Prisma__AllowanceClient<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Allowance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowanceFindFirstOrThrowArgs} args - Arguments to find a Allowance
     * @example
     * // Get one Allowance
     * const allowance = await prisma.allowance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllowanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AllowanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllowanceClient<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Allowances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allowances
     * const allowances = await prisma.allowance.findMany()
     * 
     * // Get first 10 Allowances
     * const allowances = await prisma.allowance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allowanceWithIdOnly = await prisma.allowance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllowanceFindManyArgs>(args?: SelectSubset<T, AllowanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Allowance.
     * @param {AllowanceCreateArgs} args - Arguments to create a Allowance.
     * @example
     * // Create one Allowance
     * const Allowance = await prisma.allowance.create({
     *   data: {
     *     // ... data to create a Allowance
     *   }
     * })
     * 
     */
    create<T extends AllowanceCreateArgs>(args: SelectSubset<T, AllowanceCreateArgs<ExtArgs>>): Prisma__AllowanceClient<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Allowances.
     * @param {AllowanceCreateManyArgs} args - Arguments to create many Allowances.
     * @example
     * // Create many Allowances
     * const allowance = await prisma.allowance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllowanceCreateManyArgs>(args?: SelectSubset<T, AllowanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Allowance.
     * @param {AllowanceDeleteArgs} args - Arguments to delete one Allowance.
     * @example
     * // Delete one Allowance
     * const Allowance = await prisma.allowance.delete({
     *   where: {
     *     // ... filter to delete one Allowance
     *   }
     * })
     * 
     */
    delete<T extends AllowanceDeleteArgs>(args: SelectSubset<T, AllowanceDeleteArgs<ExtArgs>>): Prisma__AllowanceClient<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Allowance.
     * @param {AllowanceUpdateArgs} args - Arguments to update one Allowance.
     * @example
     * // Update one Allowance
     * const allowance = await prisma.allowance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllowanceUpdateArgs>(args: SelectSubset<T, AllowanceUpdateArgs<ExtArgs>>): Prisma__AllowanceClient<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Allowances.
     * @param {AllowanceDeleteManyArgs} args - Arguments to filter Allowances to delete.
     * @example
     * // Delete a few Allowances
     * const { count } = await prisma.allowance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllowanceDeleteManyArgs>(args?: SelectSubset<T, AllowanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allowances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allowances
     * const allowance = await prisma.allowance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllowanceUpdateManyArgs>(args: SelectSubset<T, AllowanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Allowance.
     * @param {AllowanceUpsertArgs} args - Arguments to update or create a Allowance.
     * @example
     * // Update or create a Allowance
     * const allowance = await prisma.allowance.upsert({
     *   create: {
     *     // ... data to create a Allowance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allowance we want to update
     *   }
     * })
     */
    upsert<T extends AllowanceUpsertArgs>(args: SelectSubset<T, AllowanceUpsertArgs<ExtArgs>>): Prisma__AllowanceClient<$Result.GetResult<Prisma.$AllowancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Allowances that matches the filter.
     * @param {AllowanceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const allowance = await prisma.allowance.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: AllowanceFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Allowance.
     * @param {AllowanceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const allowance = await prisma.allowance.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AllowanceAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Allowances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowanceCountArgs} args - Arguments to filter Allowances to count.
     * @example
     * // Count the number of Allowances
     * const count = await prisma.allowance.count({
     *   where: {
     *     // ... the filter for the Allowances we want to count
     *   }
     * })
    **/
    count<T extends AllowanceCountArgs>(
      args?: Subset<T, AllowanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllowanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allowance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllowanceAggregateArgs>(args: Subset<T, AllowanceAggregateArgs>): Prisma.PrismaPromise<GetAllowanceAggregateType<T>>

    /**
     * Group by Allowance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllowanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllowanceGroupByArgs['orderBy'] }
        : { orderBy?: AllowanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllowanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllowanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Allowance model
   */
  readonly fields: AllowanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Allowance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllowanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Allowance model
   */
  interface AllowanceFieldRefs {
    readonly id: FieldRef<"Allowance", 'String'>
    readonly calculationId: FieldRef<"Allowance", 'String'>
    readonly userId: FieldRef<"Allowance", 'String'>
    readonly jobDesignation: FieldRef<"Allowance", 'String'>
    readonly basicPay: FieldRef<"Allowance", 'Float'>
    readonly marriedStatus: FieldRef<"Allowance", 'Boolean'>
    readonly distanceTravelled: FieldRef<"Allowance", 'Float'>
    readonly vehicleIncluded: FieldRef<"Allowance", 'Json'>
    readonly result: FieldRef<"Allowance", 'Json'>
    readonly calculatedAt: FieldRef<"Allowance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Allowance findUnique
   */
  export type AllowanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * Filter, which Allowance to fetch.
     */
    where: AllowanceWhereUniqueInput
  }

  /**
   * Allowance findUniqueOrThrow
   */
  export type AllowanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * Filter, which Allowance to fetch.
     */
    where: AllowanceWhereUniqueInput
  }

  /**
   * Allowance findFirst
   */
  export type AllowanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * Filter, which Allowance to fetch.
     */
    where?: AllowanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allowances to fetch.
     */
    orderBy?: AllowanceOrderByWithRelationInput | AllowanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allowances.
     */
    cursor?: AllowanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allowances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allowances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allowances.
     */
    distinct?: AllowanceScalarFieldEnum | AllowanceScalarFieldEnum[]
  }

  /**
   * Allowance findFirstOrThrow
   */
  export type AllowanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * Filter, which Allowance to fetch.
     */
    where?: AllowanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allowances to fetch.
     */
    orderBy?: AllowanceOrderByWithRelationInput | AllowanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allowances.
     */
    cursor?: AllowanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allowances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allowances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allowances.
     */
    distinct?: AllowanceScalarFieldEnum | AllowanceScalarFieldEnum[]
  }

  /**
   * Allowance findMany
   */
  export type AllowanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * Filter, which Allowances to fetch.
     */
    where?: AllowanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allowances to fetch.
     */
    orderBy?: AllowanceOrderByWithRelationInput | AllowanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Allowances.
     */
    cursor?: AllowanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allowances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allowances.
     */
    skip?: number
    distinct?: AllowanceScalarFieldEnum | AllowanceScalarFieldEnum[]
  }

  /**
   * Allowance create
   */
  export type AllowanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Allowance.
     */
    data: XOR<AllowanceCreateInput, AllowanceUncheckedCreateInput>
  }

  /**
   * Allowance createMany
   */
  export type AllowanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Allowances.
     */
    data: AllowanceCreateManyInput | AllowanceCreateManyInput[]
  }

  /**
   * Allowance update
   */
  export type AllowanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Allowance.
     */
    data: XOR<AllowanceUpdateInput, AllowanceUncheckedUpdateInput>
    /**
     * Choose, which Allowance to update.
     */
    where: AllowanceWhereUniqueInput
  }

  /**
   * Allowance updateMany
   */
  export type AllowanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Allowances.
     */
    data: XOR<AllowanceUpdateManyMutationInput, AllowanceUncheckedUpdateManyInput>
    /**
     * Filter which Allowances to update
     */
    where?: AllowanceWhereInput
    /**
     * Limit how many Allowances to update.
     */
    limit?: number
  }

  /**
   * Allowance upsert
   */
  export type AllowanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Allowance to update in case it exists.
     */
    where: AllowanceWhereUniqueInput
    /**
     * In case the Allowance found by the `where` argument doesn't exist, create a new Allowance with this data.
     */
    create: XOR<AllowanceCreateInput, AllowanceUncheckedCreateInput>
    /**
     * In case the Allowance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllowanceUpdateInput, AllowanceUncheckedUpdateInput>
  }

  /**
   * Allowance delete
   */
  export type AllowanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
    /**
     * Filter which Allowance to delete.
     */
    where: AllowanceWhereUniqueInput
  }

  /**
   * Allowance deleteMany
   */
  export type AllowanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allowances to delete
     */
    where?: AllowanceWhereInput
    /**
     * Limit how many Allowances to delete.
     */
    limit?: number
  }

  /**
   * Allowance findRaw
   */
  export type AllowanceFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Allowance aggregateRaw
   */
  export type AllowanceAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Allowance without action
   */
  export type AllowanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allowance
     */
    select?: AllowanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Allowance
     */
    omit?: AllowanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllowanceInclude<ExtArgs> | null
  }


  /**
   * Model TDClaimChecklist
   */

  export type AggregateTDClaimChecklist = {
    _count: TDClaimChecklistCountAggregateOutputType | null
    _min: TDClaimChecklistMinAggregateOutputType | null
    _max: TDClaimChecklistMaxAggregateOutputType | null
  }

  export type TDClaimChecklistMinAggregateOutputType = {
    id: string | null
    checklistID: string | null
    title: string | null
    fileUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TDClaimChecklistMaxAggregateOutputType = {
    id: string | null
    checklistID: string | null
    title: string | null
    fileUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TDClaimChecklistCountAggregateOutputType = {
    id: number
    checklistID: number
    title: number
    fileUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TDClaimChecklistMinAggregateInputType = {
    id?: true
    checklistID?: true
    title?: true
    fileUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TDClaimChecklistMaxAggregateInputType = {
    id?: true
    checklistID?: true
    title?: true
    fileUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TDClaimChecklistCountAggregateInputType = {
    id?: true
    checklistID?: true
    title?: true
    fileUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TDClaimChecklistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TDClaimChecklist to aggregate.
     */
    where?: TDClaimChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDClaimChecklists to fetch.
     */
    orderBy?: TDClaimChecklistOrderByWithRelationInput | TDClaimChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TDClaimChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDClaimChecklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDClaimChecklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TDClaimChecklists
    **/
    _count?: true | TDClaimChecklistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TDClaimChecklistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TDClaimChecklistMaxAggregateInputType
  }

  export type GetTDClaimChecklistAggregateType<T extends TDClaimChecklistAggregateArgs> = {
        [P in keyof T & keyof AggregateTDClaimChecklist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTDClaimChecklist[P]>
      : GetScalarType<T[P], AggregateTDClaimChecklist[P]>
  }




  export type TDClaimChecklistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TDClaimChecklistWhereInput
    orderBy?: TDClaimChecklistOrderByWithAggregationInput | TDClaimChecklistOrderByWithAggregationInput[]
    by: TDClaimChecklistScalarFieldEnum[] | TDClaimChecklistScalarFieldEnum
    having?: TDClaimChecklistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TDClaimChecklistCountAggregateInputType | true
    _min?: TDClaimChecklistMinAggregateInputType
    _max?: TDClaimChecklistMaxAggregateInputType
  }

  export type TDClaimChecklistGroupByOutputType = {
    id: string
    checklistID: string
    title: string | null
    fileUrl: string
    createdAt: Date
    updatedAt: Date
    _count: TDClaimChecklistCountAggregateOutputType | null
    _min: TDClaimChecklistMinAggregateOutputType | null
    _max: TDClaimChecklistMaxAggregateOutputType | null
  }

  type GetTDClaimChecklistGroupByPayload<T extends TDClaimChecklistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TDClaimChecklistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TDClaimChecklistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TDClaimChecklistGroupByOutputType[P]>
            : GetScalarType<T[P], TDClaimChecklistGroupByOutputType[P]>
        }
      >
    >


  export type TDClaimChecklistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checklistID?: boolean
    title?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tDClaimChecklist"]>



  export type TDClaimChecklistSelectScalar = {
    id?: boolean
    checklistID?: boolean
    title?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TDClaimChecklistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "checklistID" | "title" | "fileUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["tDClaimChecklist"]>

  export type $TDClaimChecklistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TDClaimChecklist"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      checklistID: string
      title: string | null
      fileUrl: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tDClaimChecklist"]>
    composites: {}
  }

  type TDClaimChecklistGetPayload<S extends boolean | null | undefined | TDClaimChecklistDefaultArgs> = $Result.GetResult<Prisma.$TDClaimChecklistPayload, S>

  type TDClaimChecklistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TDClaimChecklistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TDClaimChecklistCountAggregateInputType | true
    }

  export interface TDClaimChecklistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TDClaimChecklist'], meta: { name: 'TDClaimChecklist' } }
    /**
     * Find zero or one TDClaimChecklist that matches the filter.
     * @param {TDClaimChecklistFindUniqueArgs} args - Arguments to find a TDClaimChecklist
     * @example
     * // Get one TDClaimChecklist
     * const tDClaimChecklist = await prisma.tDClaimChecklist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TDClaimChecklistFindUniqueArgs>(args: SelectSubset<T, TDClaimChecklistFindUniqueArgs<ExtArgs>>): Prisma__TDClaimChecklistClient<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TDClaimChecklist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TDClaimChecklistFindUniqueOrThrowArgs} args - Arguments to find a TDClaimChecklist
     * @example
     * // Get one TDClaimChecklist
     * const tDClaimChecklist = await prisma.tDClaimChecklist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TDClaimChecklistFindUniqueOrThrowArgs>(args: SelectSubset<T, TDClaimChecklistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TDClaimChecklistClient<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TDClaimChecklist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDClaimChecklistFindFirstArgs} args - Arguments to find a TDClaimChecklist
     * @example
     * // Get one TDClaimChecklist
     * const tDClaimChecklist = await prisma.tDClaimChecklist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TDClaimChecklistFindFirstArgs>(args?: SelectSubset<T, TDClaimChecklistFindFirstArgs<ExtArgs>>): Prisma__TDClaimChecklistClient<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TDClaimChecklist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDClaimChecklistFindFirstOrThrowArgs} args - Arguments to find a TDClaimChecklist
     * @example
     * // Get one TDClaimChecklist
     * const tDClaimChecklist = await prisma.tDClaimChecklist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TDClaimChecklistFindFirstOrThrowArgs>(args?: SelectSubset<T, TDClaimChecklistFindFirstOrThrowArgs<ExtArgs>>): Prisma__TDClaimChecklistClient<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TDClaimChecklists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDClaimChecklistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TDClaimChecklists
     * const tDClaimChecklists = await prisma.tDClaimChecklist.findMany()
     * 
     * // Get first 10 TDClaimChecklists
     * const tDClaimChecklists = await prisma.tDClaimChecklist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tDClaimChecklistWithIdOnly = await prisma.tDClaimChecklist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TDClaimChecklistFindManyArgs>(args?: SelectSubset<T, TDClaimChecklistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TDClaimChecklist.
     * @param {TDClaimChecklistCreateArgs} args - Arguments to create a TDClaimChecklist.
     * @example
     * // Create one TDClaimChecklist
     * const TDClaimChecklist = await prisma.tDClaimChecklist.create({
     *   data: {
     *     // ... data to create a TDClaimChecklist
     *   }
     * })
     * 
     */
    create<T extends TDClaimChecklistCreateArgs>(args: SelectSubset<T, TDClaimChecklistCreateArgs<ExtArgs>>): Prisma__TDClaimChecklistClient<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TDClaimChecklists.
     * @param {TDClaimChecklistCreateManyArgs} args - Arguments to create many TDClaimChecklists.
     * @example
     * // Create many TDClaimChecklists
     * const tDClaimChecklist = await prisma.tDClaimChecklist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TDClaimChecklistCreateManyArgs>(args?: SelectSubset<T, TDClaimChecklistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TDClaimChecklist.
     * @param {TDClaimChecklistDeleteArgs} args - Arguments to delete one TDClaimChecklist.
     * @example
     * // Delete one TDClaimChecklist
     * const TDClaimChecklist = await prisma.tDClaimChecklist.delete({
     *   where: {
     *     // ... filter to delete one TDClaimChecklist
     *   }
     * })
     * 
     */
    delete<T extends TDClaimChecklistDeleteArgs>(args: SelectSubset<T, TDClaimChecklistDeleteArgs<ExtArgs>>): Prisma__TDClaimChecklistClient<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TDClaimChecklist.
     * @param {TDClaimChecklistUpdateArgs} args - Arguments to update one TDClaimChecklist.
     * @example
     * // Update one TDClaimChecklist
     * const tDClaimChecklist = await prisma.tDClaimChecklist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TDClaimChecklistUpdateArgs>(args: SelectSubset<T, TDClaimChecklistUpdateArgs<ExtArgs>>): Prisma__TDClaimChecklistClient<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TDClaimChecklists.
     * @param {TDClaimChecklistDeleteManyArgs} args - Arguments to filter TDClaimChecklists to delete.
     * @example
     * // Delete a few TDClaimChecklists
     * const { count } = await prisma.tDClaimChecklist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TDClaimChecklistDeleteManyArgs>(args?: SelectSubset<T, TDClaimChecklistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TDClaimChecklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDClaimChecklistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TDClaimChecklists
     * const tDClaimChecklist = await prisma.tDClaimChecklist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TDClaimChecklistUpdateManyArgs>(args: SelectSubset<T, TDClaimChecklistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TDClaimChecklist.
     * @param {TDClaimChecklistUpsertArgs} args - Arguments to update or create a TDClaimChecklist.
     * @example
     * // Update or create a TDClaimChecklist
     * const tDClaimChecklist = await prisma.tDClaimChecklist.upsert({
     *   create: {
     *     // ... data to create a TDClaimChecklist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TDClaimChecklist we want to update
     *   }
     * })
     */
    upsert<T extends TDClaimChecklistUpsertArgs>(args: SelectSubset<T, TDClaimChecklistUpsertArgs<ExtArgs>>): Prisma__TDClaimChecklistClient<$Result.GetResult<Prisma.$TDClaimChecklistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TDClaimChecklists that matches the filter.
     * @param {TDClaimChecklistFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const tDClaimChecklist = await prisma.tDClaimChecklist.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TDClaimChecklistFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TDClaimChecklist.
     * @param {TDClaimChecklistAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const tDClaimChecklist = await prisma.tDClaimChecklist.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TDClaimChecklistAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of TDClaimChecklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDClaimChecklistCountArgs} args - Arguments to filter TDClaimChecklists to count.
     * @example
     * // Count the number of TDClaimChecklists
     * const count = await prisma.tDClaimChecklist.count({
     *   where: {
     *     // ... the filter for the TDClaimChecklists we want to count
     *   }
     * })
    **/
    count<T extends TDClaimChecklistCountArgs>(
      args?: Subset<T, TDClaimChecklistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TDClaimChecklistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TDClaimChecklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDClaimChecklistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TDClaimChecklistAggregateArgs>(args: Subset<T, TDClaimChecklistAggregateArgs>): Prisma.PrismaPromise<GetTDClaimChecklistAggregateType<T>>

    /**
     * Group by TDClaimChecklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDClaimChecklistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TDClaimChecklistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TDClaimChecklistGroupByArgs['orderBy'] }
        : { orderBy?: TDClaimChecklistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TDClaimChecklistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTDClaimChecklistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TDClaimChecklist model
   */
  readonly fields: TDClaimChecklistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TDClaimChecklist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TDClaimChecklistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TDClaimChecklist model
   */
  interface TDClaimChecklistFieldRefs {
    readonly id: FieldRef<"TDClaimChecklist", 'String'>
    readonly checklistID: FieldRef<"TDClaimChecklist", 'String'>
    readonly title: FieldRef<"TDClaimChecklist", 'String'>
    readonly fileUrl: FieldRef<"TDClaimChecklist", 'String'>
    readonly createdAt: FieldRef<"TDClaimChecklist", 'DateTime'>
    readonly updatedAt: FieldRef<"TDClaimChecklist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TDClaimChecklist findUnique
   */
  export type TDClaimChecklistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * Filter, which TDClaimChecklist to fetch.
     */
    where: TDClaimChecklistWhereUniqueInput
  }

  /**
   * TDClaimChecklist findUniqueOrThrow
   */
  export type TDClaimChecklistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * Filter, which TDClaimChecklist to fetch.
     */
    where: TDClaimChecklistWhereUniqueInput
  }

  /**
   * TDClaimChecklist findFirst
   */
  export type TDClaimChecklistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * Filter, which TDClaimChecklist to fetch.
     */
    where?: TDClaimChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDClaimChecklists to fetch.
     */
    orderBy?: TDClaimChecklistOrderByWithRelationInput | TDClaimChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TDClaimChecklists.
     */
    cursor?: TDClaimChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDClaimChecklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDClaimChecklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TDClaimChecklists.
     */
    distinct?: TDClaimChecklistScalarFieldEnum | TDClaimChecklistScalarFieldEnum[]
  }

  /**
   * TDClaimChecklist findFirstOrThrow
   */
  export type TDClaimChecklistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * Filter, which TDClaimChecklist to fetch.
     */
    where?: TDClaimChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDClaimChecklists to fetch.
     */
    orderBy?: TDClaimChecklistOrderByWithRelationInput | TDClaimChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TDClaimChecklists.
     */
    cursor?: TDClaimChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDClaimChecklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDClaimChecklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TDClaimChecklists.
     */
    distinct?: TDClaimChecklistScalarFieldEnum | TDClaimChecklistScalarFieldEnum[]
  }

  /**
   * TDClaimChecklist findMany
   */
  export type TDClaimChecklistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * Filter, which TDClaimChecklists to fetch.
     */
    where?: TDClaimChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDClaimChecklists to fetch.
     */
    orderBy?: TDClaimChecklistOrderByWithRelationInput | TDClaimChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TDClaimChecklists.
     */
    cursor?: TDClaimChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDClaimChecklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDClaimChecklists.
     */
    skip?: number
    distinct?: TDClaimChecklistScalarFieldEnum | TDClaimChecklistScalarFieldEnum[]
  }

  /**
   * TDClaimChecklist create
   */
  export type TDClaimChecklistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * The data needed to create a TDClaimChecklist.
     */
    data: XOR<TDClaimChecklistCreateInput, TDClaimChecklistUncheckedCreateInput>
  }

  /**
   * TDClaimChecklist createMany
   */
  export type TDClaimChecklistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TDClaimChecklists.
     */
    data: TDClaimChecklistCreateManyInput | TDClaimChecklistCreateManyInput[]
  }

  /**
   * TDClaimChecklist update
   */
  export type TDClaimChecklistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * The data needed to update a TDClaimChecklist.
     */
    data: XOR<TDClaimChecklistUpdateInput, TDClaimChecklistUncheckedUpdateInput>
    /**
     * Choose, which TDClaimChecklist to update.
     */
    where: TDClaimChecklistWhereUniqueInput
  }

  /**
   * TDClaimChecklist updateMany
   */
  export type TDClaimChecklistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TDClaimChecklists.
     */
    data: XOR<TDClaimChecklistUpdateManyMutationInput, TDClaimChecklistUncheckedUpdateManyInput>
    /**
     * Filter which TDClaimChecklists to update
     */
    where?: TDClaimChecklistWhereInput
    /**
     * Limit how many TDClaimChecklists to update.
     */
    limit?: number
  }

  /**
   * TDClaimChecklist upsert
   */
  export type TDClaimChecklistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * The filter to search for the TDClaimChecklist to update in case it exists.
     */
    where: TDClaimChecklistWhereUniqueInput
    /**
     * In case the TDClaimChecklist found by the `where` argument doesn't exist, create a new TDClaimChecklist with this data.
     */
    create: XOR<TDClaimChecklistCreateInput, TDClaimChecklistUncheckedCreateInput>
    /**
     * In case the TDClaimChecklist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TDClaimChecklistUpdateInput, TDClaimChecklistUncheckedUpdateInput>
  }

  /**
   * TDClaimChecklist delete
   */
  export type TDClaimChecklistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
    /**
     * Filter which TDClaimChecklist to delete.
     */
    where: TDClaimChecklistWhereUniqueInput
  }

  /**
   * TDClaimChecklist deleteMany
   */
  export type TDClaimChecklistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TDClaimChecklists to delete
     */
    where?: TDClaimChecklistWhereInput
    /**
     * Limit how many TDClaimChecklists to delete.
     */
    limit?: number
  }

  /**
   * TDClaimChecklist findRaw
   */
  export type TDClaimChecklistFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TDClaimChecklist aggregateRaw
   */
  export type TDClaimChecklistAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TDClaimChecklist without action
   */
  export type TDClaimChecklistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDClaimChecklist
     */
    select?: TDClaimChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDClaimChecklist
     */
    omit?: TDClaimChecklistOmit<ExtArgs> | null
  }


  /**
   * Model TDRates
   */

  export type AggregateTDRates = {
    _count: TDRatesCountAggregateOutputType | null
    _avg: TDRatesAvgAggregateOutputType | null
    _sum: TDRatesSumAggregateOutputType | null
    _min: TDRatesMinAggregateOutputType | null
    _max: TDRatesMaxAggregateOutputType | null
  }

  export type TDRatesAvgAggregateOutputType = {
    hotelAllowance: number | null
    taxiAllowance: number | null
    foodAllowance: number | null
  }

  export type TDRatesSumAggregateOutputType = {
    hotelAllowance: number | null
    taxiAllowance: number | null
    foodAllowance: number | null
  }

  export type TDRatesMinAggregateOutputType = {
    id: string | null
    tdRatesId: string | null
    rankCategory: string | null
    hotelAllowance: number | null
    taxiAllowance: number | null
    foodAllowance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TDRatesMaxAggregateOutputType = {
    id: string | null
    tdRatesId: string | null
    rankCategory: string | null
    hotelAllowance: number | null
    taxiAllowance: number | null
    foodAllowance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TDRatesCountAggregateOutputType = {
    id: number
    tdRatesId: number
    rankCategory: number
    hotelAllowance: number
    taxiAllowance: number
    foodAllowance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TDRatesAvgAggregateInputType = {
    hotelAllowance?: true
    taxiAllowance?: true
    foodAllowance?: true
  }

  export type TDRatesSumAggregateInputType = {
    hotelAllowance?: true
    taxiAllowance?: true
    foodAllowance?: true
  }

  export type TDRatesMinAggregateInputType = {
    id?: true
    tdRatesId?: true
    rankCategory?: true
    hotelAllowance?: true
    taxiAllowance?: true
    foodAllowance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TDRatesMaxAggregateInputType = {
    id?: true
    tdRatesId?: true
    rankCategory?: true
    hotelAllowance?: true
    taxiAllowance?: true
    foodAllowance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TDRatesCountAggregateInputType = {
    id?: true
    tdRatesId?: true
    rankCategory?: true
    hotelAllowance?: true
    taxiAllowance?: true
    foodAllowance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TDRatesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TDRates to aggregate.
     */
    where?: TDRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDRates to fetch.
     */
    orderBy?: TDRatesOrderByWithRelationInput | TDRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TDRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TDRates
    **/
    _count?: true | TDRatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TDRatesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TDRatesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TDRatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TDRatesMaxAggregateInputType
  }

  export type GetTDRatesAggregateType<T extends TDRatesAggregateArgs> = {
        [P in keyof T & keyof AggregateTDRates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTDRates[P]>
      : GetScalarType<T[P], AggregateTDRates[P]>
  }




  export type TDRatesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TDRatesWhereInput
    orderBy?: TDRatesOrderByWithAggregationInput | TDRatesOrderByWithAggregationInput[]
    by: TDRatesScalarFieldEnum[] | TDRatesScalarFieldEnum
    having?: TDRatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TDRatesCountAggregateInputType | true
    _avg?: TDRatesAvgAggregateInputType
    _sum?: TDRatesSumAggregateInputType
    _min?: TDRatesMinAggregateInputType
    _max?: TDRatesMaxAggregateInputType
  }

  export type TDRatesGroupByOutputType = {
    id: string
    tdRatesId: string
    rankCategory: string | null
    hotelAllowance: number
    taxiAllowance: number
    foodAllowance: number
    createdAt: Date
    updatedAt: Date
    _count: TDRatesCountAggregateOutputType | null
    _avg: TDRatesAvgAggregateOutputType | null
    _sum: TDRatesSumAggregateOutputType | null
    _min: TDRatesMinAggregateOutputType | null
    _max: TDRatesMaxAggregateOutputType | null
  }

  type GetTDRatesGroupByPayload<T extends TDRatesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TDRatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TDRatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TDRatesGroupByOutputType[P]>
            : GetScalarType<T[P], TDRatesGroupByOutputType[P]>
        }
      >
    >


  export type TDRatesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tdRatesId?: boolean
    rankCategory?: boolean
    hotelAllowance?: boolean
    taxiAllowance?: boolean
    foodAllowance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tDRates"]>



  export type TDRatesSelectScalar = {
    id?: boolean
    tdRatesId?: boolean
    rankCategory?: boolean
    hotelAllowance?: boolean
    taxiAllowance?: boolean
    foodAllowance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TDRatesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tdRatesId" | "rankCategory" | "hotelAllowance" | "taxiAllowance" | "foodAllowance" | "createdAt" | "updatedAt", ExtArgs["result"]["tDRates"]>

  export type $TDRatesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TDRates"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tdRatesId: string
      rankCategory: string | null
      hotelAllowance: number
      taxiAllowance: number
      foodAllowance: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tDRates"]>
    composites: {}
  }

  type TDRatesGetPayload<S extends boolean | null | undefined | TDRatesDefaultArgs> = $Result.GetResult<Prisma.$TDRatesPayload, S>

  type TDRatesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TDRatesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TDRatesCountAggregateInputType | true
    }

  export interface TDRatesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TDRates'], meta: { name: 'TDRates' } }
    /**
     * Find zero or one TDRates that matches the filter.
     * @param {TDRatesFindUniqueArgs} args - Arguments to find a TDRates
     * @example
     * // Get one TDRates
     * const tDRates = await prisma.tDRates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TDRatesFindUniqueArgs>(args: SelectSubset<T, TDRatesFindUniqueArgs<ExtArgs>>): Prisma__TDRatesClient<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TDRates that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TDRatesFindUniqueOrThrowArgs} args - Arguments to find a TDRates
     * @example
     * // Get one TDRates
     * const tDRates = await prisma.tDRates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TDRatesFindUniqueOrThrowArgs>(args: SelectSubset<T, TDRatesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TDRatesClient<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TDRates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRatesFindFirstArgs} args - Arguments to find a TDRates
     * @example
     * // Get one TDRates
     * const tDRates = await prisma.tDRates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TDRatesFindFirstArgs>(args?: SelectSubset<T, TDRatesFindFirstArgs<ExtArgs>>): Prisma__TDRatesClient<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TDRates that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRatesFindFirstOrThrowArgs} args - Arguments to find a TDRates
     * @example
     * // Get one TDRates
     * const tDRates = await prisma.tDRates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TDRatesFindFirstOrThrowArgs>(args?: SelectSubset<T, TDRatesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TDRatesClient<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TDRates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRatesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TDRates
     * const tDRates = await prisma.tDRates.findMany()
     * 
     * // Get first 10 TDRates
     * const tDRates = await prisma.tDRates.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tDRatesWithIdOnly = await prisma.tDRates.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TDRatesFindManyArgs>(args?: SelectSubset<T, TDRatesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TDRates.
     * @param {TDRatesCreateArgs} args - Arguments to create a TDRates.
     * @example
     * // Create one TDRates
     * const TDRates = await prisma.tDRates.create({
     *   data: {
     *     // ... data to create a TDRates
     *   }
     * })
     * 
     */
    create<T extends TDRatesCreateArgs>(args: SelectSubset<T, TDRatesCreateArgs<ExtArgs>>): Prisma__TDRatesClient<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TDRates.
     * @param {TDRatesCreateManyArgs} args - Arguments to create many TDRates.
     * @example
     * // Create many TDRates
     * const tDRates = await prisma.tDRates.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TDRatesCreateManyArgs>(args?: SelectSubset<T, TDRatesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TDRates.
     * @param {TDRatesDeleteArgs} args - Arguments to delete one TDRates.
     * @example
     * // Delete one TDRates
     * const TDRates = await prisma.tDRates.delete({
     *   where: {
     *     // ... filter to delete one TDRates
     *   }
     * })
     * 
     */
    delete<T extends TDRatesDeleteArgs>(args: SelectSubset<T, TDRatesDeleteArgs<ExtArgs>>): Prisma__TDRatesClient<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TDRates.
     * @param {TDRatesUpdateArgs} args - Arguments to update one TDRates.
     * @example
     * // Update one TDRates
     * const tDRates = await prisma.tDRates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TDRatesUpdateArgs>(args: SelectSubset<T, TDRatesUpdateArgs<ExtArgs>>): Prisma__TDRatesClient<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TDRates.
     * @param {TDRatesDeleteManyArgs} args - Arguments to filter TDRates to delete.
     * @example
     * // Delete a few TDRates
     * const { count } = await prisma.tDRates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TDRatesDeleteManyArgs>(args?: SelectSubset<T, TDRatesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TDRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TDRates
     * const tDRates = await prisma.tDRates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TDRatesUpdateManyArgs>(args: SelectSubset<T, TDRatesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TDRates.
     * @param {TDRatesUpsertArgs} args - Arguments to update or create a TDRates.
     * @example
     * // Update or create a TDRates
     * const tDRates = await prisma.tDRates.upsert({
     *   create: {
     *     // ... data to create a TDRates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TDRates we want to update
     *   }
     * })
     */
    upsert<T extends TDRatesUpsertArgs>(args: SelectSubset<T, TDRatesUpsertArgs<ExtArgs>>): Prisma__TDRatesClient<$Result.GetResult<Prisma.$TDRatesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TDRates that matches the filter.
     * @param {TDRatesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const tDRates = await prisma.tDRates.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TDRatesFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TDRates.
     * @param {TDRatesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const tDRates = await prisma.tDRates.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TDRatesAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of TDRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRatesCountArgs} args - Arguments to filter TDRates to count.
     * @example
     * // Count the number of TDRates
     * const count = await prisma.tDRates.count({
     *   where: {
     *     // ... the filter for the TDRates we want to count
     *   }
     * })
    **/
    count<T extends TDRatesCountArgs>(
      args?: Subset<T, TDRatesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TDRatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TDRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TDRatesAggregateArgs>(args: Subset<T, TDRatesAggregateArgs>): Prisma.PrismaPromise<GetTDRatesAggregateType<T>>

    /**
     * Group by TDRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TDRatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TDRatesGroupByArgs['orderBy'] }
        : { orderBy?: TDRatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TDRatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTDRatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TDRates model
   */
  readonly fields: TDRatesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TDRates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TDRatesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TDRates model
   */
  interface TDRatesFieldRefs {
    readonly id: FieldRef<"TDRates", 'String'>
    readonly tdRatesId: FieldRef<"TDRates", 'String'>
    readonly rankCategory: FieldRef<"TDRates", 'String'>
    readonly hotelAllowance: FieldRef<"TDRates", 'Float'>
    readonly taxiAllowance: FieldRef<"TDRates", 'Float'>
    readonly foodAllowance: FieldRef<"TDRates", 'Float'>
    readonly createdAt: FieldRef<"TDRates", 'DateTime'>
    readonly updatedAt: FieldRef<"TDRates", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TDRates findUnique
   */
  export type TDRatesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * Filter, which TDRates to fetch.
     */
    where: TDRatesWhereUniqueInput
  }

  /**
   * TDRates findUniqueOrThrow
   */
  export type TDRatesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * Filter, which TDRates to fetch.
     */
    where: TDRatesWhereUniqueInput
  }

  /**
   * TDRates findFirst
   */
  export type TDRatesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * Filter, which TDRates to fetch.
     */
    where?: TDRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDRates to fetch.
     */
    orderBy?: TDRatesOrderByWithRelationInput | TDRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TDRates.
     */
    cursor?: TDRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TDRates.
     */
    distinct?: TDRatesScalarFieldEnum | TDRatesScalarFieldEnum[]
  }

  /**
   * TDRates findFirstOrThrow
   */
  export type TDRatesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * Filter, which TDRates to fetch.
     */
    where?: TDRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDRates to fetch.
     */
    orderBy?: TDRatesOrderByWithRelationInput | TDRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TDRates.
     */
    cursor?: TDRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TDRates.
     */
    distinct?: TDRatesScalarFieldEnum | TDRatesScalarFieldEnum[]
  }

  /**
   * TDRates findMany
   */
  export type TDRatesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * Filter, which TDRates to fetch.
     */
    where?: TDRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDRates to fetch.
     */
    orderBy?: TDRatesOrderByWithRelationInput | TDRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TDRates.
     */
    cursor?: TDRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDRates.
     */
    skip?: number
    distinct?: TDRatesScalarFieldEnum | TDRatesScalarFieldEnum[]
  }

  /**
   * TDRates create
   */
  export type TDRatesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * The data needed to create a TDRates.
     */
    data: XOR<TDRatesCreateInput, TDRatesUncheckedCreateInput>
  }

  /**
   * TDRates createMany
   */
  export type TDRatesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TDRates.
     */
    data: TDRatesCreateManyInput | TDRatesCreateManyInput[]
  }

  /**
   * TDRates update
   */
  export type TDRatesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * The data needed to update a TDRates.
     */
    data: XOR<TDRatesUpdateInput, TDRatesUncheckedUpdateInput>
    /**
     * Choose, which TDRates to update.
     */
    where: TDRatesWhereUniqueInput
  }

  /**
   * TDRates updateMany
   */
  export type TDRatesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TDRates.
     */
    data: XOR<TDRatesUpdateManyMutationInput, TDRatesUncheckedUpdateManyInput>
    /**
     * Filter which TDRates to update
     */
    where?: TDRatesWhereInput
    /**
     * Limit how many TDRates to update.
     */
    limit?: number
  }

  /**
   * TDRates upsert
   */
  export type TDRatesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * The filter to search for the TDRates to update in case it exists.
     */
    where: TDRatesWhereUniqueInput
    /**
     * In case the TDRates found by the `where` argument doesn't exist, create a new TDRates with this data.
     */
    create: XOR<TDRatesCreateInput, TDRatesUncheckedCreateInput>
    /**
     * In case the TDRates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TDRatesUpdateInput, TDRatesUncheckedUpdateInput>
  }

  /**
   * TDRates delete
   */
  export type TDRatesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
    /**
     * Filter which TDRates to delete.
     */
    where: TDRatesWhereUniqueInput
  }

  /**
   * TDRates deleteMany
   */
  export type TDRatesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TDRates to delete
     */
    where?: TDRatesWhereInput
    /**
     * Limit how many TDRates to delete.
     */
    limit?: number
  }

  /**
   * TDRates findRaw
   */
  export type TDRatesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TDRates aggregateRaw
   */
  export type TDRatesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TDRates without action
   */
  export type TDRatesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRates
     */
    select?: TDRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRates
     */
    omit?: TDRatesOmit<ExtArgs> | null
  }


  /**
   * Model TDRules
   */

  export type AggregateTDRules = {
    _count: TDRulesCountAggregateOutputType | null
    _min: TDRulesMinAggregateOutputType | null
    _max: TDRulesMaxAggregateOutputType | null
  }

  export type TDRulesMinAggregateOutputType = {
    id: string | null
    tdRulesId: string | null
    ruleNumber: string | null
    title: string | null
    description: string | null
    iconUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TDRulesMaxAggregateOutputType = {
    id: string | null
    tdRulesId: string | null
    ruleNumber: string | null
    title: string | null
    description: string | null
    iconUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TDRulesCountAggregateOutputType = {
    id: number
    tdRulesId: number
    ruleNumber: number
    title: number
    description: number
    iconUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TDRulesMinAggregateInputType = {
    id?: true
    tdRulesId?: true
    ruleNumber?: true
    title?: true
    description?: true
    iconUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TDRulesMaxAggregateInputType = {
    id?: true
    tdRulesId?: true
    ruleNumber?: true
    title?: true
    description?: true
    iconUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TDRulesCountAggregateInputType = {
    id?: true
    tdRulesId?: true
    ruleNumber?: true
    title?: true
    description?: true
    iconUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TDRulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TDRules to aggregate.
     */
    where?: TDRulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDRules to fetch.
     */
    orderBy?: TDRulesOrderByWithRelationInput | TDRulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TDRulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TDRules
    **/
    _count?: true | TDRulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TDRulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TDRulesMaxAggregateInputType
  }

  export type GetTDRulesAggregateType<T extends TDRulesAggregateArgs> = {
        [P in keyof T & keyof AggregateTDRules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTDRules[P]>
      : GetScalarType<T[P], AggregateTDRules[P]>
  }




  export type TDRulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TDRulesWhereInput
    orderBy?: TDRulesOrderByWithAggregationInput | TDRulesOrderByWithAggregationInput[]
    by: TDRulesScalarFieldEnum[] | TDRulesScalarFieldEnum
    having?: TDRulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TDRulesCountAggregateInputType | true
    _min?: TDRulesMinAggregateInputType
    _max?: TDRulesMaxAggregateInputType
  }

  export type TDRulesGroupByOutputType = {
    id: string
    tdRulesId: string
    ruleNumber: string
    title: string
    description: string | null
    iconUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: TDRulesCountAggregateOutputType | null
    _min: TDRulesMinAggregateOutputType | null
    _max: TDRulesMaxAggregateOutputType | null
  }

  type GetTDRulesGroupByPayload<T extends TDRulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TDRulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TDRulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TDRulesGroupByOutputType[P]>
            : GetScalarType<T[P], TDRulesGroupByOutputType[P]>
        }
      >
    >


  export type TDRulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tdRulesId?: boolean
    ruleNumber?: boolean
    title?: boolean
    description?: boolean
    iconUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tDRules"]>



  export type TDRulesSelectScalar = {
    id?: boolean
    tdRulesId?: boolean
    ruleNumber?: boolean
    title?: boolean
    description?: boolean
    iconUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TDRulesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tdRulesId" | "ruleNumber" | "title" | "description" | "iconUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["tDRules"]>

  export type $TDRulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TDRules"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tdRulesId: string
      ruleNumber: string
      title: string
      description: string | null
      iconUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tDRules"]>
    composites: {}
  }

  type TDRulesGetPayload<S extends boolean | null | undefined | TDRulesDefaultArgs> = $Result.GetResult<Prisma.$TDRulesPayload, S>

  type TDRulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TDRulesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TDRulesCountAggregateInputType | true
    }

  export interface TDRulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TDRules'], meta: { name: 'TDRules' } }
    /**
     * Find zero or one TDRules that matches the filter.
     * @param {TDRulesFindUniqueArgs} args - Arguments to find a TDRules
     * @example
     * // Get one TDRules
     * const tDRules = await prisma.tDRules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TDRulesFindUniqueArgs>(args: SelectSubset<T, TDRulesFindUniqueArgs<ExtArgs>>): Prisma__TDRulesClient<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TDRules that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TDRulesFindUniqueOrThrowArgs} args - Arguments to find a TDRules
     * @example
     * // Get one TDRules
     * const tDRules = await prisma.tDRules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TDRulesFindUniqueOrThrowArgs>(args: SelectSubset<T, TDRulesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TDRulesClient<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TDRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRulesFindFirstArgs} args - Arguments to find a TDRules
     * @example
     * // Get one TDRules
     * const tDRules = await prisma.tDRules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TDRulesFindFirstArgs>(args?: SelectSubset<T, TDRulesFindFirstArgs<ExtArgs>>): Prisma__TDRulesClient<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TDRules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRulesFindFirstOrThrowArgs} args - Arguments to find a TDRules
     * @example
     * // Get one TDRules
     * const tDRules = await prisma.tDRules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TDRulesFindFirstOrThrowArgs>(args?: SelectSubset<T, TDRulesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TDRulesClient<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TDRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRulesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TDRules
     * const tDRules = await prisma.tDRules.findMany()
     * 
     * // Get first 10 TDRules
     * const tDRules = await prisma.tDRules.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tDRulesWithIdOnly = await prisma.tDRules.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TDRulesFindManyArgs>(args?: SelectSubset<T, TDRulesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TDRules.
     * @param {TDRulesCreateArgs} args - Arguments to create a TDRules.
     * @example
     * // Create one TDRules
     * const TDRules = await prisma.tDRules.create({
     *   data: {
     *     // ... data to create a TDRules
     *   }
     * })
     * 
     */
    create<T extends TDRulesCreateArgs>(args: SelectSubset<T, TDRulesCreateArgs<ExtArgs>>): Prisma__TDRulesClient<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TDRules.
     * @param {TDRulesCreateManyArgs} args - Arguments to create many TDRules.
     * @example
     * // Create many TDRules
     * const tDRules = await prisma.tDRules.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TDRulesCreateManyArgs>(args?: SelectSubset<T, TDRulesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TDRules.
     * @param {TDRulesDeleteArgs} args - Arguments to delete one TDRules.
     * @example
     * // Delete one TDRules
     * const TDRules = await prisma.tDRules.delete({
     *   where: {
     *     // ... filter to delete one TDRules
     *   }
     * })
     * 
     */
    delete<T extends TDRulesDeleteArgs>(args: SelectSubset<T, TDRulesDeleteArgs<ExtArgs>>): Prisma__TDRulesClient<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TDRules.
     * @param {TDRulesUpdateArgs} args - Arguments to update one TDRules.
     * @example
     * // Update one TDRules
     * const tDRules = await prisma.tDRules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TDRulesUpdateArgs>(args: SelectSubset<T, TDRulesUpdateArgs<ExtArgs>>): Prisma__TDRulesClient<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TDRules.
     * @param {TDRulesDeleteManyArgs} args - Arguments to filter TDRules to delete.
     * @example
     * // Delete a few TDRules
     * const { count } = await prisma.tDRules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TDRulesDeleteManyArgs>(args?: SelectSubset<T, TDRulesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TDRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TDRules
     * const tDRules = await prisma.tDRules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TDRulesUpdateManyArgs>(args: SelectSubset<T, TDRulesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TDRules.
     * @param {TDRulesUpsertArgs} args - Arguments to update or create a TDRules.
     * @example
     * // Update or create a TDRules
     * const tDRules = await prisma.tDRules.upsert({
     *   create: {
     *     // ... data to create a TDRules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TDRules we want to update
     *   }
     * })
     */
    upsert<T extends TDRulesUpsertArgs>(args: SelectSubset<T, TDRulesUpsertArgs<ExtArgs>>): Prisma__TDRulesClient<$Result.GetResult<Prisma.$TDRulesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TDRules that matches the filter.
     * @param {TDRulesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const tDRules = await prisma.tDRules.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TDRulesFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TDRules.
     * @param {TDRulesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const tDRules = await prisma.tDRules.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TDRulesAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of TDRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRulesCountArgs} args - Arguments to filter TDRules to count.
     * @example
     * // Count the number of TDRules
     * const count = await prisma.tDRules.count({
     *   where: {
     *     // ... the filter for the TDRules we want to count
     *   }
     * })
    **/
    count<T extends TDRulesCountArgs>(
      args?: Subset<T, TDRulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TDRulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TDRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TDRulesAggregateArgs>(args: Subset<T, TDRulesAggregateArgs>): Prisma.PrismaPromise<GetTDRulesAggregateType<T>>

    /**
     * Group by TDRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TDRulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TDRulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TDRulesGroupByArgs['orderBy'] }
        : { orderBy?: TDRulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TDRulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTDRulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TDRules model
   */
  readonly fields: TDRulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TDRules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TDRulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TDRules model
   */
  interface TDRulesFieldRefs {
    readonly id: FieldRef<"TDRules", 'String'>
    readonly tdRulesId: FieldRef<"TDRules", 'String'>
    readonly ruleNumber: FieldRef<"TDRules", 'String'>
    readonly title: FieldRef<"TDRules", 'String'>
    readonly description: FieldRef<"TDRules", 'String'>
    readonly iconUrl: FieldRef<"TDRules", 'String'>
    readonly createdAt: FieldRef<"TDRules", 'DateTime'>
    readonly updatedAt: FieldRef<"TDRules", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TDRules findUnique
   */
  export type TDRulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * Filter, which TDRules to fetch.
     */
    where: TDRulesWhereUniqueInput
  }

  /**
   * TDRules findUniqueOrThrow
   */
  export type TDRulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * Filter, which TDRules to fetch.
     */
    where: TDRulesWhereUniqueInput
  }

  /**
   * TDRules findFirst
   */
  export type TDRulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * Filter, which TDRules to fetch.
     */
    where?: TDRulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDRules to fetch.
     */
    orderBy?: TDRulesOrderByWithRelationInput | TDRulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TDRules.
     */
    cursor?: TDRulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TDRules.
     */
    distinct?: TDRulesScalarFieldEnum | TDRulesScalarFieldEnum[]
  }

  /**
   * TDRules findFirstOrThrow
   */
  export type TDRulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * Filter, which TDRules to fetch.
     */
    where?: TDRulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDRules to fetch.
     */
    orderBy?: TDRulesOrderByWithRelationInput | TDRulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TDRules.
     */
    cursor?: TDRulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TDRules.
     */
    distinct?: TDRulesScalarFieldEnum | TDRulesScalarFieldEnum[]
  }

  /**
   * TDRules findMany
   */
  export type TDRulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * Filter, which TDRules to fetch.
     */
    where?: TDRulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TDRules to fetch.
     */
    orderBy?: TDRulesOrderByWithRelationInput | TDRulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TDRules.
     */
    cursor?: TDRulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TDRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TDRules.
     */
    skip?: number
    distinct?: TDRulesScalarFieldEnum | TDRulesScalarFieldEnum[]
  }

  /**
   * TDRules create
   */
  export type TDRulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * The data needed to create a TDRules.
     */
    data: XOR<TDRulesCreateInput, TDRulesUncheckedCreateInput>
  }

  /**
   * TDRules createMany
   */
  export type TDRulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TDRules.
     */
    data: TDRulesCreateManyInput | TDRulesCreateManyInput[]
  }

  /**
   * TDRules update
   */
  export type TDRulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * The data needed to update a TDRules.
     */
    data: XOR<TDRulesUpdateInput, TDRulesUncheckedUpdateInput>
    /**
     * Choose, which TDRules to update.
     */
    where: TDRulesWhereUniqueInput
  }

  /**
   * TDRules updateMany
   */
  export type TDRulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TDRules.
     */
    data: XOR<TDRulesUpdateManyMutationInput, TDRulesUncheckedUpdateManyInput>
    /**
     * Filter which TDRules to update
     */
    where?: TDRulesWhereInput
    /**
     * Limit how many TDRules to update.
     */
    limit?: number
  }

  /**
   * TDRules upsert
   */
  export type TDRulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * The filter to search for the TDRules to update in case it exists.
     */
    where: TDRulesWhereUniqueInput
    /**
     * In case the TDRules found by the `where` argument doesn't exist, create a new TDRules with this data.
     */
    create: XOR<TDRulesCreateInput, TDRulesUncheckedCreateInput>
    /**
     * In case the TDRules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TDRulesUpdateInput, TDRulesUncheckedUpdateInput>
  }

  /**
   * TDRules delete
   */
  export type TDRulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
    /**
     * Filter which TDRules to delete.
     */
    where: TDRulesWhereUniqueInput
  }

  /**
   * TDRules deleteMany
   */
  export type TDRulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TDRules to delete
     */
    where?: TDRulesWhereInput
    /**
     * Limit how many TDRules to delete.
     */
    limit?: number
  }

  /**
   * TDRules findRaw
   */
  export type TDRulesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TDRules aggregateRaw
   */
  export type TDRulesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TDRules without action
   */
  export type TDRulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TDRules
     */
    select?: TDRulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TDRules
     */
    omit?: TDRulesOmit<ExtArgs> | null
  }


  /**
   * Model UpskillCertification
   */

  export type AggregateUpskillCertification = {
    _count: UpskillCertificationCountAggregateOutputType | null
    _avg: UpskillCertificationAvgAggregateOutputType | null
    _sum: UpskillCertificationSumAggregateOutputType | null
    _min: UpskillCertificationMinAggregateOutputType | null
    _max: UpskillCertificationMaxAggregateOutputType | null
  }

  export type UpskillCertificationAvgAggregateOutputType = {
    price: number | null
    tax: number | null
    discount: number | null
  }

  export type UpskillCertificationSumAggregateOutputType = {
    price: number | null
    tax: number | null
    discount: number | null
  }

  export type UpskillCertificationMinAggregateOutputType = {
    id: string | null
    certificationId: string | null
    type: string | null
    course: string | null
    price: number | null
    description: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tax: number | null
    discount: number | null
  }

  export type UpskillCertificationMaxAggregateOutputType = {
    id: string | null
    certificationId: string | null
    type: string | null
    course: string | null
    price: number | null
    description: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tax: number | null
    discount: number | null
  }

  export type UpskillCertificationCountAggregateOutputType = {
    id: number
    certificationId: number
    type: number
    course: number
    price: number
    description: number
    image: number
    createdAt: number
    updatedAt: number
    tax: number
    discount: number
    _all: number
  }


  export type UpskillCertificationAvgAggregateInputType = {
    price?: true
    tax?: true
    discount?: true
  }

  export type UpskillCertificationSumAggregateInputType = {
    price?: true
    tax?: true
    discount?: true
  }

  export type UpskillCertificationMinAggregateInputType = {
    id?: true
    certificationId?: true
    type?: true
    course?: true
    price?: true
    description?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    tax?: true
    discount?: true
  }

  export type UpskillCertificationMaxAggregateInputType = {
    id?: true
    certificationId?: true
    type?: true
    course?: true
    price?: true
    description?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    tax?: true
    discount?: true
  }

  export type UpskillCertificationCountAggregateInputType = {
    id?: true
    certificationId?: true
    type?: true
    course?: true
    price?: true
    description?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    tax?: true
    discount?: true
    _all?: true
  }

  export type UpskillCertificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UpskillCertification to aggregate.
     */
    where?: UpskillCertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpskillCertifications to fetch.
     */
    orderBy?: UpskillCertificationOrderByWithRelationInput | UpskillCertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UpskillCertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpskillCertifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpskillCertifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UpskillCertifications
    **/
    _count?: true | UpskillCertificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UpskillCertificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UpskillCertificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UpskillCertificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UpskillCertificationMaxAggregateInputType
  }

  export type GetUpskillCertificationAggregateType<T extends UpskillCertificationAggregateArgs> = {
        [P in keyof T & keyof AggregateUpskillCertification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUpskillCertification[P]>
      : GetScalarType<T[P], AggregateUpskillCertification[P]>
  }




  export type UpskillCertificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UpskillCertificationWhereInput
    orderBy?: UpskillCertificationOrderByWithAggregationInput | UpskillCertificationOrderByWithAggregationInput[]
    by: UpskillCertificationScalarFieldEnum[] | UpskillCertificationScalarFieldEnum
    having?: UpskillCertificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UpskillCertificationCountAggregateInputType | true
    _avg?: UpskillCertificationAvgAggregateInputType
    _sum?: UpskillCertificationSumAggregateInputType
    _min?: UpskillCertificationMinAggregateInputType
    _max?: UpskillCertificationMaxAggregateInputType
  }

  export type UpskillCertificationGroupByOutputType = {
    id: string
    certificationId: string
    type: string | null
    course: string
    price: number
    description: string
    image: string
    createdAt: Date
    updatedAt: Date
    tax: number | null
    discount: number | null
    _count: UpskillCertificationCountAggregateOutputType | null
    _avg: UpskillCertificationAvgAggregateOutputType | null
    _sum: UpskillCertificationSumAggregateOutputType | null
    _min: UpskillCertificationMinAggregateOutputType | null
    _max: UpskillCertificationMaxAggregateOutputType | null
  }

  type GetUpskillCertificationGroupByPayload<T extends UpskillCertificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UpskillCertificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UpskillCertificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UpskillCertificationGroupByOutputType[P]>
            : GetScalarType<T[P], UpskillCertificationGroupByOutputType[P]>
        }
      >
    >


  export type UpskillCertificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    certificationId?: boolean
    type?: boolean
    course?: boolean
    price?: boolean
    description?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tax?: boolean
    discount?: boolean
    upskillEnrollments?: boolean | UpskillCertification$upskillEnrollmentsArgs<ExtArgs>
    _count?: boolean | UpskillCertificationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["upskillCertification"]>



  export type UpskillCertificationSelectScalar = {
    id?: boolean
    certificationId?: boolean
    type?: boolean
    course?: boolean
    price?: boolean
    description?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tax?: boolean
    discount?: boolean
  }

  export type UpskillCertificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "certificationId" | "type" | "course" | "price" | "description" | "image" | "createdAt" | "updatedAt" | "tax" | "discount", ExtArgs["result"]["upskillCertification"]>
  export type UpskillCertificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    upskillEnrollments?: boolean | UpskillCertification$upskillEnrollmentsArgs<ExtArgs>
    _count?: boolean | UpskillCertificationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UpskillCertificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UpskillCertification"
    objects: {
      upskillEnrollments: Prisma.$UpSkillEnrollmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      certificationId: string
      type: string | null
      course: string
      price: number
      description: string
      image: string
      createdAt: Date
      updatedAt: Date
      tax: number | null
      discount: number | null
    }, ExtArgs["result"]["upskillCertification"]>
    composites: {}
  }

  type UpskillCertificationGetPayload<S extends boolean | null | undefined | UpskillCertificationDefaultArgs> = $Result.GetResult<Prisma.$UpskillCertificationPayload, S>

  type UpskillCertificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UpskillCertificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UpskillCertificationCountAggregateInputType | true
    }

  export interface UpskillCertificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UpskillCertification'], meta: { name: 'UpskillCertification' } }
    /**
     * Find zero or one UpskillCertification that matches the filter.
     * @param {UpskillCertificationFindUniqueArgs} args - Arguments to find a UpskillCertification
     * @example
     * // Get one UpskillCertification
     * const upskillCertification = await prisma.upskillCertification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UpskillCertificationFindUniqueArgs>(args: SelectSubset<T, UpskillCertificationFindUniqueArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UpskillCertification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UpskillCertificationFindUniqueOrThrowArgs} args - Arguments to find a UpskillCertification
     * @example
     * // Get one UpskillCertification
     * const upskillCertification = await prisma.upskillCertification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UpskillCertificationFindUniqueOrThrowArgs>(args: SelectSubset<T, UpskillCertificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UpskillCertification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpskillCertificationFindFirstArgs} args - Arguments to find a UpskillCertification
     * @example
     * // Get one UpskillCertification
     * const upskillCertification = await prisma.upskillCertification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UpskillCertificationFindFirstArgs>(args?: SelectSubset<T, UpskillCertificationFindFirstArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UpskillCertification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpskillCertificationFindFirstOrThrowArgs} args - Arguments to find a UpskillCertification
     * @example
     * // Get one UpskillCertification
     * const upskillCertification = await prisma.upskillCertification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UpskillCertificationFindFirstOrThrowArgs>(args?: SelectSubset<T, UpskillCertificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UpskillCertifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpskillCertificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UpskillCertifications
     * const upskillCertifications = await prisma.upskillCertification.findMany()
     * 
     * // Get first 10 UpskillCertifications
     * const upskillCertifications = await prisma.upskillCertification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const upskillCertificationWithIdOnly = await prisma.upskillCertification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UpskillCertificationFindManyArgs>(args?: SelectSubset<T, UpskillCertificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UpskillCertification.
     * @param {UpskillCertificationCreateArgs} args - Arguments to create a UpskillCertification.
     * @example
     * // Create one UpskillCertification
     * const UpskillCertification = await prisma.upskillCertification.create({
     *   data: {
     *     // ... data to create a UpskillCertification
     *   }
     * })
     * 
     */
    create<T extends UpskillCertificationCreateArgs>(args: SelectSubset<T, UpskillCertificationCreateArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UpskillCertifications.
     * @param {UpskillCertificationCreateManyArgs} args - Arguments to create many UpskillCertifications.
     * @example
     * // Create many UpskillCertifications
     * const upskillCertification = await prisma.upskillCertification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UpskillCertificationCreateManyArgs>(args?: SelectSubset<T, UpskillCertificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UpskillCertification.
     * @param {UpskillCertificationDeleteArgs} args - Arguments to delete one UpskillCertification.
     * @example
     * // Delete one UpskillCertification
     * const UpskillCertification = await prisma.upskillCertification.delete({
     *   where: {
     *     // ... filter to delete one UpskillCertification
     *   }
     * })
     * 
     */
    delete<T extends UpskillCertificationDeleteArgs>(args: SelectSubset<T, UpskillCertificationDeleteArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UpskillCertification.
     * @param {UpskillCertificationUpdateArgs} args - Arguments to update one UpskillCertification.
     * @example
     * // Update one UpskillCertification
     * const upskillCertification = await prisma.upskillCertification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UpskillCertificationUpdateArgs>(args: SelectSubset<T, UpskillCertificationUpdateArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UpskillCertifications.
     * @param {UpskillCertificationDeleteManyArgs} args - Arguments to filter UpskillCertifications to delete.
     * @example
     * // Delete a few UpskillCertifications
     * const { count } = await prisma.upskillCertification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UpskillCertificationDeleteManyArgs>(args?: SelectSubset<T, UpskillCertificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UpskillCertifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpskillCertificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UpskillCertifications
     * const upskillCertification = await prisma.upskillCertification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UpskillCertificationUpdateManyArgs>(args: SelectSubset<T, UpskillCertificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UpskillCertification.
     * @param {UpskillCertificationUpsertArgs} args - Arguments to update or create a UpskillCertification.
     * @example
     * // Update or create a UpskillCertification
     * const upskillCertification = await prisma.upskillCertification.upsert({
     *   create: {
     *     // ... data to create a UpskillCertification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UpskillCertification we want to update
     *   }
     * })
     */
    upsert<T extends UpskillCertificationUpsertArgs>(args: SelectSubset<T, UpskillCertificationUpsertArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UpskillCertifications that matches the filter.
     * @param {UpskillCertificationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const upskillCertification = await prisma.upskillCertification.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UpskillCertificationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UpskillCertification.
     * @param {UpskillCertificationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const upskillCertification = await prisma.upskillCertification.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UpskillCertificationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of UpskillCertifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpskillCertificationCountArgs} args - Arguments to filter UpskillCertifications to count.
     * @example
     * // Count the number of UpskillCertifications
     * const count = await prisma.upskillCertification.count({
     *   where: {
     *     // ... the filter for the UpskillCertifications we want to count
     *   }
     * })
    **/
    count<T extends UpskillCertificationCountArgs>(
      args?: Subset<T, UpskillCertificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UpskillCertificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UpskillCertification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpskillCertificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UpskillCertificationAggregateArgs>(args: Subset<T, UpskillCertificationAggregateArgs>): Prisma.PrismaPromise<GetUpskillCertificationAggregateType<T>>

    /**
     * Group by UpskillCertification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpskillCertificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UpskillCertificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UpskillCertificationGroupByArgs['orderBy'] }
        : { orderBy?: UpskillCertificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UpskillCertificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUpskillCertificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UpskillCertification model
   */
  readonly fields: UpskillCertificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UpskillCertification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UpskillCertificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    upskillEnrollments<T extends UpskillCertification$upskillEnrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, UpskillCertification$upskillEnrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UpskillCertification model
   */
  interface UpskillCertificationFieldRefs {
    readonly id: FieldRef<"UpskillCertification", 'String'>
    readonly certificationId: FieldRef<"UpskillCertification", 'String'>
    readonly type: FieldRef<"UpskillCertification", 'String'>
    readonly course: FieldRef<"UpskillCertification", 'String'>
    readonly price: FieldRef<"UpskillCertification", 'Float'>
    readonly description: FieldRef<"UpskillCertification", 'String'>
    readonly image: FieldRef<"UpskillCertification", 'String'>
    readonly createdAt: FieldRef<"UpskillCertification", 'DateTime'>
    readonly updatedAt: FieldRef<"UpskillCertification", 'DateTime'>
    readonly tax: FieldRef<"UpskillCertification", 'Float'>
    readonly discount: FieldRef<"UpskillCertification", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * UpskillCertification findUnique
   */
  export type UpskillCertificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * Filter, which UpskillCertification to fetch.
     */
    where: UpskillCertificationWhereUniqueInput
  }

  /**
   * UpskillCertification findUniqueOrThrow
   */
  export type UpskillCertificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * Filter, which UpskillCertification to fetch.
     */
    where: UpskillCertificationWhereUniqueInput
  }

  /**
   * UpskillCertification findFirst
   */
  export type UpskillCertificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * Filter, which UpskillCertification to fetch.
     */
    where?: UpskillCertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpskillCertifications to fetch.
     */
    orderBy?: UpskillCertificationOrderByWithRelationInput | UpskillCertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UpskillCertifications.
     */
    cursor?: UpskillCertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpskillCertifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpskillCertifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UpskillCertifications.
     */
    distinct?: UpskillCertificationScalarFieldEnum | UpskillCertificationScalarFieldEnum[]
  }

  /**
   * UpskillCertification findFirstOrThrow
   */
  export type UpskillCertificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * Filter, which UpskillCertification to fetch.
     */
    where?: UpskillCertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpskillCertifications to fetch.
     */
    orderBy?: UpskillCertificationOrderByWithRelationInput | UpskillCertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UpskillCertifications.
     */
    cursor?: UpskillCertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpskillCertifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpskillCertifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UpskillCertifications.
     */
    distinct?: UpskillCertificationScalarFieldEnum | UpskillCertificationScalarFieldEnum[]
  }

  /**
   * UpskillCertification findMany
   */
  export type UpskillCertificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * Filter, which UpskillCertifications to fetch.
     */
    where?: UpskillCertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpskillCertifications to fetch.
     */
    orderBy?: UpskillCertificationOrderByWithRelationInput | UpskillCertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UpskillCertifications.
     */
    cursor?: UpskillCertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpskillCertifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpskillCertifications.
     */
    skip?: number
    distinct?: UpskillCertificationScalarFieldEnum | UpskillCertificationScalarFieldEnum[]
  }

  /**
   * UpskillCertification create
   */
  export type UpskillCertificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * The data needed to create a UpskillCertification.
     */
    data: XOR<UpskillCertificationCreateInput, UpskillCertificationUncheckedCreateInput>
  }

  /**
   * UpskillCertification createMany
   */
  export type UpskillCertificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UpskillCertifications.
     */
    data: UpskillCertificationCreateManyInput | UpskillCertificationCreateManyInput[]
  }

  /**
   * UpskillCertification update
   */
  export type UpskillCertificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * The data needed to update a UpskillCertification.
     */
    data: XOR<UpskillCertificationUpdateInput, UpskillCertificationUncheckedUpdateInput>
    /**
     * Choose, which UpskillCertification to update.
     */
    where: UpskillCertificationWhereUniqueInput
  }

  /**
   * UpskillCertification updateMany
   */
  export type UpskillCertificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UpskillCertifications.
     */
    data: XOR<UpskillCertificationUpdateManyMutationInput, UpskillCertificationUncheckedUpdateManyInput>
    /**
     * Filter which UpskillCertifications to update
     */
    where?: UpskillCertificationWhereInput
    /**
     * Limit how many UpskillCertifications to update.
     */
    limit?: number
  }

  /**
   * UpskillCertification upsert
   */
  export type UpskillCertificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * The filter to search for the UpskillCertification to update in case it exists.
     */
    where: UpskillCertificationWhereUniqueInput
    /**
     * In case the UpskillCertification found by the `where` argument doesn't exist, create a new UpskillCertification with this data.
     */
    create: XOR<UpskillCertificationCreateInput, UpskillCertificationUncheckedCreateInput>
    /**
     * In case the UpskillCertification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UpskillCertificationUpdateInput, UpskillCertificationUncheckedUpdateInput>
  }

  /**
   * UpskillCertification delete
   */
  export type UpskillCertificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
    /**
     * Filter which UpskillCertification to delete.
     */
    where: UpskillCertificationWhereUniqueInput
  }

  /**
   * UpskillCertification deleteMany
   */
  export type UpskillCertificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UpskillCertifications to delete
     */
    where?: UpskillCertificationWhereInput
    /**
     * Limit how many UpskillCertifications to delete.
     */
    limit?: number
  }

  /**
   * UpskillCertification findRaw
   */
  export type UpskillCertificationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UpskillCertification aggregateRaw
   */
  export type UpskillCertificationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UpskillCertification.upskillEnrollments
   */
  export type UpskillCertification$upskillEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    where?: UpSkillEnrollmentWhereInput
    orderBy?: UpSkillEnrollmentOrderByWithRelationInput | UpSkillEnrollmentOrderByWithRelationInput[]
    cursor?: UpSkillEnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UpSkillEnrollmentScalarFieldEnum | UpSkillEnrollmentScalarFieldEnum[]
  }

  /**
   * UpskillCertification without action
   */
  export type UpskillCertificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpskillCertification
     */
    select?: UpskillCertificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpskillCertification
     */
    omit?: UpskillCertificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpskillCertificationInclude<ExtArgs> | null
  }


  /**
   * Model UpSkillEnrollment
   */

  export type AggregateUpSkillEnrollment = {
    _count: UpSkillEnrollmentCountAggregateOutputType | null
    _min: UpSkillEnrollmentMinAggregateOutputType | null
    _max: UpSkillEnrollmentMaxAggregateOutputType | null
  }

  export type UpSkillEnrollmentMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    certificationId: string | null
    name: string | null
    email: string | null
    phone: string | null
    verificationStatus: $Enums.VerificationStatus | null
    interestStatus: $Enums.InterestStatus | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type UpSkillEnrollmentMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    certificationId: string | null
    name: string | null
    email: string | null
    phone: string | null
    verificationStatus: $Enums.VerificationStatus | null
    interestStatus: $Enums.InterestStatus | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type UpSkillEnrollmentCountAggregateOutputType = {
    id: number
    applicationId: number
    certificationId: number
    name: number
    email: number
    phone: number
    verificationStatus: number
    interestStatus: number
    description: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type UpSkillEnrollmentMinAggregateInputType = {
    id?: true
    applicationId?: true
    certificationId?: true
    name?: true
    email?: true
    phone?: true
    verificationStatus?: true
    interestStatus?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type UpSkillEnrollmentMaxAggregateInputType = {
    id?: true
    applicationId?: true
    certificationId?: true
    name?: true
    email?: true
    phone?: true
    verificationStatus?: true
    interestStatus?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type UpSkillEnrollmentCountAggregateInputType = {
    id?: true
    applicationId?: true
    certificationId?: true
    name?: true
    email?: true
    phone?: true
    verificationStatus?: true
    interestStatus?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type UpSkillEnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UpSkillEnrollment to aggregate.
     */
    where?: UpSkillEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpSkillEnrollments to fetch.
     */
    orderBy?: UpSkillEnrollmentOrderByWithRelationInput | UpSkillEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UpSkillEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpSkillEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpSkillEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UpSkillEnrollments
    **/
    _count?: true | UpSkillEnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UpSkillEnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UpSkillEnrollmentMaxAggregateInputType
  }

  export type GetUpSkillEnrollmentAggregateType<T extends UpSkillEnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateUpSkillEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUpSkillEnrollment[P]>
      : GetScalarType<T[P], AggregateUpSkillEnrollment[P]>
  }




  export type UpSkillEnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UpSkillEnrollmentWhereInput
    orderBy?: UpSkillEnrollmentOrderByWithAggregationInput | UpSkillEnrollmentOrderByWithAggregationInput[]
    by: UpSkillEnrollmentScalarFieldEnum[] | UpSkillEnrollmentScalarFieldEnum
    having?: UpSkillEnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UpSkillEnrollmentCountAggregateInputType | true
    _min?: UpSkillEnrollmentMinAggregateInputType
    _max?: UpSkillEnrollmentMaxAggregateInputType
  }

  export type UpSkillEnrollmentGroupByOutputType = {
    id: string
    applicationId: string | null
    certificationId: string
    name: string
    email: string
    phone: string
    verificationStatus: $Enums.VerificationStatus
    interestStatus: $Enums.InterestStatus
    description: string | null
    createdAt: Date
    updatedAt: Date
    userId: string | null
    _count: UpSkillEnrollmentCountAggregateOutputType | null
    _min: UpSkillEnrollmentMinAggregateOutputType | null
    _max: UpSkillEnrollmentMaxAggregateOutputType | null
  }

  type GetUpSkillEnrollmentGroupByPayload<T extends UpSkillEnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UpSkillEnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UpSkillEnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UpSkillEnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], UpSkillEnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type UpSkillEnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    certificationId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    verificationStatus?: boolean
    interestStatus?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    certification?: boolean | UpskillCertificationDefaultArgs<ExtArgs>
    user?: boolean | UpSkillEnrollment$userArgs<ExtArgs>
  }, ExtArgs["result"]["upSkillEnrollment"]>



  export type UpSkillEnrollmentSelectScalar = {
    id?: boolean
    applicationId?: boolean
    certificationId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    verificationStatus?: boolean
    interestStatus?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type UpSkillEnrollmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "certificationId" | "name" | "email" | "phone" | "verificationStatus" | "interestStatus" | "description" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["upSkillEnrollment"]>
  export type UpSkillEnrollmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certification?: boolean | UpskillCertificationDefaultArgs<ExtArgs>
    user?: boolean | UpSkillEnrollment$userArgs<ExtArgs>
  }

  export type $UpSkillEnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UpSkillEnrollment"
    objects: {
      certification: Prisma.$UpskillCertificationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string | null
      certificationId: string
      name: string
      email: string
      phone: string
      verificationStatus: $Enums.VerificationStatus
      interestStatus: $Enums.InterestStatus
      description: string | null
      createdAt: Date
      updatedAt: Date
      userId: string | null
    }, ExtArgs["result"]["upSkillEnrollment"]>
    composites: {}
  }

  type UpSkillEnrollmentGetPayload<S extends boolean | null | undefined | UpSkillEnrollmentDefaultArgs> = $Result.GetResult<Prisma.$UpSkillEnrollmentPayload, S>

  type UpSkillEnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UpSkillEnrollmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UpSkillEnrollmentCountAggregateInputType | true
    }

  export interface UpSkillEnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UpSkillEnrollment'], meta: { name: 'UpSkillEnrollment' } }
    /**
     * Find zero or one UpSkillEnrollment that matches the filter.
     * @param {UpSkillEnrollmentFindUniqueArgs} args - Arguments to find a UpSkillEnrollment
     * @example
     * // Get one UpSkillEnrollment
     * const upSkillEnrollment = await prisma.upSkillEnrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UpSkillEnrollmentFindUniqueArgs>(args: SelectSubset<T, UpSkillEnrollmentFindUniqueArgs<ExtArgs>>): Prisma__UpSkillEnrollmentClient<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UpSkillEnrollment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UpSkillEnrollmentFindUniqueOrThrowArgs} args - Arguments to find a UpSkillEnrollment
     * @example
     * // Get one UpSkillEnrollment
     * const upSkillEnrollment = await prisma.upSkillEnrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UpSkillEnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, UpSkillEnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UpSkillEnrollmentClient<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UpSkillEnrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpSkillEnrollmentFindFirstArgs} args - Arguments to find a UpSkillEnrollment
     * @example
     * // Get one UpSkillEnrollment
     * const upSkillEnrollment = await prisma.upSkillEnrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UpSkillEnrollmentFindFirstArgs>(args?: SelectSubset<T, UpSkillEnrollmentFindFirstArgs<ExtArgs>>): Prisma__UpSkillEnrollmentClient<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UpSkillEnrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpSkillEnrollmentFindFirstOrThrowArgs} args - Arguments to find a UpSkillEnrollment
     * @example
     * // Get one UpSkillEnrollment
     * const upSkillEnrollment = await prisma.upSkillEnrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UpSkillEnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, UpSkillEnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UpSkillEnrollmentClient<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UpSkillEnrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpSkillEnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UpSkillEnrollments
     * const upSkillEnrollments = await prisma.upSkillEnrollment.findMany()
     * 
     * // Get first 10 UpSkillEnrollments
     * const upSkillEnrollments = await prisma.upSkillEnrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const upSkillEnrollmentWithIdOnly = await prisma.upSkillEnrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UpSkillEnrollmentFindManyArgs>(args?: SelectSubset<T, UpSkillEnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UpSkillEnrollment.
     * @param {UpSkillEnrollmentCreateArgs} args - Arguments to create a UpSkillEnrollment.
     * @example
     * // Create one UpSkillEnrollment
     * const UpSkillEnrollment = await prisma.upSkillEnrollment.create({
     *   data: {
     *     // ... data to create a UpSkillEnrollment
     *   }
     * })
     * 
     */
    create<T extends UpSkillEnrollmentCreateArgs>(args: SelectSubset<T, UpSkillEnrollmentCreateArgs<ExtArgs>>): Prisma__UpSkillEnrollmentClient<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UpSkillEnrollments.
     * @param {UpSkillEnrollmentCreateManyArgs} args - Arguments to create many UpSkillEnrollments.
     * @example
     * // Create many UpSkillEnrollments
     * const upSkillEnrollment = await prisma.upSkillEnrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UpSkillEnrollmentCreateManyArgs>(args?: SelectSubset<T, UpSkillEnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UpSkillEnrollment.
     * @param {UpSkillEnrollmentDeleteArgs} args - Arguments to delete one UpSkillEnrollment.
     * @example
     * // Delete one UpSkillEnrollment
     * const UpSkillEnrollment = await prisma.upSkillEnrollment.delete({
     *   where: {
     *     // ... filter to delete one UpSkillEnrollment
     *   }
     * })
     * 
     */
    delete<T extends UpSkillEnrollmentDeleteArgs>(args: SelectSubset<T, UpSkillEnrollmentDeleteArgs<ExtArgs>>): Prisma__UpSkillEnrollmentClient<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UpSkillEnrollment.
     * @param {UpSkillEnrollmentUpdateArgs} args - Arguments to update one UpSkillEnrollment.
     * @example
     * // Update one UpSkillEnrollment
     * const upSkillEnrollment = await prisma.upSkillEnrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UpSkillEnrollmentUpdateArgs>(args: SelectSubset<T, UpSkillEnrollmentUpdateArgs<ExtArgs>>): Prisma__UpSkillEnrollmentClient<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UpSkillEnrollments.
     * @param {UpSkillEnrollmentDeleteManyArgs} args - Arguments to filter UpSkillEnrollments to delete.
     * @example
     * // Delete a few UpSkillEnrollments
     * const { count } = await prisma.upSkillEnrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UpSkillEnrollmentDeleteManyArgs>(args?: SelectSubset<T, UpSkillEnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UpSkillEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpSkillEnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UpSkillEnrollments
     * const upSkillEnrollment = await prisma.upSkillEnrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UpSkillEnrollmentUpdateManyArgs>(args: SelectSubset<T, UpSkillEnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UpSkillEnrollment.
     * @param {UpSkillEnrollmentUpsertArgs} args - Arguments to update or create a UpSkillEnrollment.
     * @example
     * // Update or create a UpSkillEnrollment
     * const upSkillEnrollment = await prisma.upSkillEnrollment.upsert({
     *   create: {
     *     // ... data to create a UpSkillEnrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UpSkillEnrollment we want to update
     *   }
     * })
     */
    upsert<T extends UpSkillEnrollmentUpsertArgs>(args: SelectSubset<T, UpSkillEnrollmentUpsertArgs<ExtArgs>>): Prisma__UpSkillEnrollmentClient<$Result.GetResult<Prisma.$UpSkillEnrollmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UpSkillEnrollments that matches the filter.
     * @param {UpSkillEnrollmentFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const upSkillEnrollment = await prisma.upSkillEnrollment.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UpSkillEnrollmentFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UpSkillEnrollment.
     * @param {UpSkillEnrollmentAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const upSkillEnrollment = await prisma.upSkillEnrollment.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UpSkillEnrollmentAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of UpSkillEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpSkillEnrollmentCountArgs} args - Arguments to filter UpSkillEnrollments to count.
     * @example
     * // Count the number of UpSkillEnrollments
     * const count = await prisma.upSkillEnrollment.count({
     *   where: {
     *     // ... the filter for the UpSkillEnrollments we want to count
     *   }
     * })
    **/
    count<T extends UpSkillEnrollmentCountArgs>(
      args?: Subset<T, UpSkillEnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UpSkillEnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UpSkillEnrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpSkillEnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UpSkillEnrollmentAggregateArgs>(args: Subset<T, UpSkillEnrollmentAggregateArgs>): Prisma.PrismaPromise<GetUpSkillEnrollmentAggregateType<T>>

    /**
     * Group by UpSkillEnrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpSkillEnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UpSkillEnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UpSkillEnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: UpSkillEnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UpSkillEnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUpSkillEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UpSkillEnrollment model
   */
  readonly fields: UpSkillEnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UpSkillEnrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UpSkillEnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    certification<T extends UpskillCertificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UpskillCertificationDefaultArgs<ExtArgs>>): Prisma__UpskillCertificationClient<$Result.GetResult<Prisma.$UpskillCertificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UpSkillEnrollment$userArgs<ExtArgs> = {}>(args?: Subset<T, UpSkillEnrollment$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UpSkillEnrollment model
   */
  interface UpSkillEnrollmentFieldRefs {
    readonly id: FieldRef<"UpSkillEnrollment", 'String'>
    readonly applicationId: FieldRef<"UpSkillEnrollment", 'String'>
    readonly certificationId: FieldRef<"UpSkillEnrollment", 'String'>
    readonly name: FieldRef<"UpSkillEnrollment", 'String'>
    readonly email: FieldRef<"UpSkillEnrollment", 'String'>
    readonly phone: FieldRef<"UpSkillEnrollment", 'String'>
    readonly verificationStatus: FieldRef<"UpSkillEnrollment", 'VerificationStatus'>
    readonly interestStatus: FieldRef<"UpSkillEnrollment", 'InterestStatus'>
    readonly description: FieldRef<"UpSkillEnrollment", 'String'>
    readonly createdAt: FieldRef<"UpSkillEnrollment", 'DateTime'>
    readonly updatedAt: FieldRef<"UpSkillEnrollment", 'DateTime'>
    readonly userId: FieldRef<"UpSkillEnrollment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UpSkillEnrollment findUnique
   */
  export type UpSkillEnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which UpSkillEnrollment to fetch.
     */
    where: UpSkillEnrollmentWhereUniqueInput
  }

  /**
   * UpSkillEnrollment findUniqueOrThrow
   */
  export type UpSkillEnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which UpSkillEnrollment to fetch.
     */
    where: UpSkillEnrollmentWhereUniqueInput
  }

  /**
   * UpSkillEnrollment findFirst
   */
  export type UpSkillEnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which UpSkillEnrollment to fetch.
     */
    where?: UpSkillEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpSkillEnrollments to fetch.
     */
    orderBy?: UpSkillEnrollmentOrderByWithRelationInput | UpSkillEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UpSkillEnrollments.
     */
    cursor?: UpSkillEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpSkillEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpSkillEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UpSkillEnrollments.
     */
    distinct?: UpSkillEnrollmentScalarFieldEnum | UpSkillEnrollmentScalarFieldEnum[]
  }

  /**
   * UpSkillEnrollment findFirstOrThrow
   */
  export type UpSkillEnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which UpSkillEnrollment to fetch.
     */
    where?: UpSkillEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpSkillEnrollments to fetch.
     */
    orderBy?: UpSkillEnrollmentOrderByWithRelationInput | UpSkillEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UpSkillEnrollments.
     */
    cursor?: UpSkillEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpSkillEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpSkillEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UpSkillEnrollments.
     */
    distinct?: UpSkillEnrollmentScalarFieldEnum | UpSkillEnrollmentScalarFieldEnum[]
  }

  /**
   * UpSkillEnrollment findMany
   */
  export type UpSkillEnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which UpSkillEnrollments to fetch.
     */
    where?: UpSkillEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpSkillEnrollments to fetch.
     */
    orderBy?: UpSkillEnrollmentOrderByWithRelationInput | UpSkillEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UpSkillEnrollments.
     */
    cursor?: UpSkillEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpSkillEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpSkillEnrollments.
     */
    skip?: number
    distinct?: UpSkillEnrollmentScalarFieldEnum | UpSkillEnrollmentScalarFieldEnum[]
  }

  /**
   * UpSkillEnrollment create
   */
  export type UpSkillEnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to create a UpSkillEnrollment.
     */
    data: XOR<UpSkillEnrollmentCreateInput, UpSkillEnrollmentUncheckedCreateInput>
  }

  /**
   * UpSkillEnrollment createMany
   */
  export type UpSkillEnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UpSkillEnrollments.
     */
    data: UpSkillEnrollmentCreateManyInput | UpSkillEnrollmentCreateManyInput[]
  }

  /**
   * UpSkillEnrollment update
   */
  export type UpSkillEnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to update a UpSkillEnrollment.
     */
    data: XOR<UpSkillEnrollmentUpdateInput, UpSkillEnrollmentUncheckedUpdateInput>
    /**
     * Choose, which UpSkillEnrollment to update.
     */
    where: UpSkillEnrollmentWhereUniqueInput
  }

  /**
   * UpSkillEnrollment updateMany
   */
  export type UpSkillEnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UpSkillEnrollments.
     */
    data: XOR<UpSkillEnrollmentUpdateManyMutationInput, UpSkillEnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which UpSkillEnrollments to update
     */
    where?: UpSkillEnrollmentWhereInput
    /**
     * Limit how many UpSkillEnrollments to update.
     */
    limit?: number
  }

  /**
   * UpSkillEnrollment upsert
   */
  export type UpSkillEnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * The filter to search for the UpSkillEnrollment to update in case it exists.
     */
    where: UpSkillEnrollmentWhereUniqueInput
    /**
     * In case the UpSkillEnrollment found by the `where` argument doesn't exist, create a new UpSkillEnrollment with this data.
     */
    create: XOR<UpSkillEnrollmentCreateInput, UpSkillEnrollmentUncheckedCreateInput>
    /**
     * In case the UpSkillEnrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UpSkillEnrollmentUpdateInput, UpSkillEnrollmentUncheckedUpdateInput>
  }

  /**
   * UpSkillEnrollment delete
   */
  export type UpSkillEnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
    /**
     * Filter which UpSkillEnrollment to delete.
     */
    where: UpSkillEnrollmentWhereUniqueInput
  }

  /**
   * UpSkillEnrollment deleteMany
   */
  export type UpSkillEnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UpSkillEnrollments to delete
     */
    where?: UpSkillEnrollmentWhereInput
    /**
     * Limit how many UpSkillEnrollments to delete.
     */
    limit?: number
  }

  /**
   * UpSkillEnrollment findRaw
   */
  export type UpSkillEnrollmentFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UpSkillEnrollment aggregateRaw
   */
  export type UpSkillEnrollmentAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UpSkillEnrollment.user
   */
  export type UpSkillEnrollment$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UpSkillEnrollment without action
   */
  export type UpSkillEnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpSkillEnrollment
     */
    select?: UpSkillEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpSkillEnrollment
     */
    omit?: UpSkillEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpSkillEnrollmentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    username: 'username',
    email: 'email',
    password: 'password',
    armyId: 'armyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ChatbotScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionId: 'sessionId',
    query: 'query',
    response: 'response',
    createdAt: 'createdAt'
  };

  export type ChatbotScalarFieldEnum = (typeof ChatbotScalarFieldEnum)[keyof typeof ChatbotScalarFieldEnum]


  export const TodoScalarFieldEnum: {
    id: 'id',
    todoId: 'todoId',
    userId: 'userId',
    activity: 'activity',
    description: 'description',
    status: 'status',
    priority: 'priority',
    dueDate: 'dueDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TodoScalarFieldEnum = (typeof TodoScalarFieldEnum)[keyof typeof TodoScalarFieldEnum]


  export const AllowanceScalarFieldEnum: {
    id: 'id',
    calculationId: 'calculationId',
    userId: 'userId',
    jobDesignation: 'jobDesignation',
    basicPay: 'basicPay',
    marriedStatus: 'marriedStatus',
    distanceTravelled: 'distanceTravelled',
    vehicleIncluded: 'vehicleIncluded',
    result: 'result',
    calculatedAt: 'calculatedAt'
  };

  export type AllowanceScalarFieldEnum = (typeof AllowanceScalarFieldEnum)[keyof typeof AllowanceScalarFieldEnum]


  export const TDClaimChecklistScalarFieldEnum: {
    id: 'id',
    checklistID: 'checklistID',
    title: 'title',
    fileUrl: 'fileUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TDClaimChecklistScalarFieldEnum = (typeof TDClaimChecklistScalarFieldEnum)[keyof typeof TDClaimChecklistScalarFieldEnum]


  export const TDRatesScalarFieldEnum: {
    id: 'id',
    tdRatesId: 'tdRatesId',
    rankCategory: 'rankCategory',
    hotelAllowance: 'hotelAllowance',
    taxiAllowance: 'taxiAllowance',
    foodAllowance: 'foodAllowance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TDRatesScalarFieldEnum = (typeof TDRatesScalarFieldEnum)[keyof typeof TDRatesScalarFieldEnum]


  export const TDRulesScalarFieldEnum: {
    id: 'id',
    tdRulesId: 'tdRulesId',
    ruleNumber: 'ruleNumber',
    title: 'title',
    description: 'description',
    iconUrl: 'iconUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TDRulesScalarFieldEnum = (typeof TDRulesScalarFieldEnum)[keyof typeof TDRulesScalarFieldEnum]


  export const UpskillCertificationScalarFieldEnum: {
    id: 'id',
    certificationId: 'certificationId',
    type: 'type',
    course: 'course',
    price: 'price',
    description: 'description',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tax: 'tax',
    discount: 'discount'
  };

  export type UpskillCertificationScalarFieldEnum = (typeof UpskillCertificationScalarFieldEnum)[keyof typeof UpskillCertificationScalarFieldEnum]


  export const UpSkillEnrollmentScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    certificationId: 'certificationId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    verificationStatus: 'verificationStatus',
    interestStatus: 'interestStatus',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type UpSkillEnrollmentScalarFieldEnum = (typeof UpSkillEnrollmentScalarFieldEnum)[keyof typeof UpSkillEnrollmentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'VerificationStatus'
   */
  export type EnumVerificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VerificationStatus'>
    


  /**
   * Reference to a field of type 'VerificationStatus[]'
   */
  export type ListEnumVerificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VerificationStatus[]'>
    


  /**
   * Reference to a field of type 'InterestStatus'
   */
  export type EnumInterestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterestStatus'>
    


  /**
   * Reference to a field of type 'InterestStatus[]'
   */
  export type ListEnumInterestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterestStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    userId?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    armyId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    todos?: TodoListRelationFilter
    allowances?: AllowanceListRelationFilter
    enrollments?: UpSkillEnrollmentListRelationFilter
    chatbots?: ChatbotListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    armyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    todos?: TodoOrderByRelationAggregateInput
    allowances?: AllowanceOrderByRelationAggregateInput
    enrollments?: UpSkillEnrollmentOrderByRelationAggregateInput
    chatbots?: ChatbotOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    username?: string
    email?: string
    armyId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    todos?: TodoListRelationFilter
    allowances?: AllowanceListRelationFilter
    enrollments?: UpSkillEnrollmentListRelationFilter
    chatbots?: ChatbotListRelationFilter
  }, "id" | "userId" | "username" | "email" | "armyId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    armyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    userId?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    armyId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ChatbotWhereInput = {
    AND?: ChatbotWhereInput | ChatbotWhereInput[]
    OR?: ChatbotWhereInput[]
    NOT?: ChatbotWhereInput | ChatbotWhereInput[]
    id?: StringFilter<"Chatbot"> | string
    userId?: StringNullableFilter<"Chatbot"> | string | null
    sessionId?: StringFilter<"Chatbot"> | string
    query?: StringFilter<"Chatbot"> | string
    response?: StringFilter<"Chatbot"> | string
    createdAt?: DateTimeFilter<"Chatbot"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ChatbotOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    query?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ChatbotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatbotWhereInput | ChatbotWhereInput[]
    OR?: ChatbotWhereInput[]
    NOT?: ChatbotWhereInput | ChatbotWhereInput[]
    userId?: StringNullableFilter<"Chatbot"> | string | null
    sessionId?: StringFilter<"Chatbot"> | string
    query?: StringFilter<"Chatbot"> | string
    response?: StringFilter<"Chatbot"> | string
    createdAt?: DateTimeFilter<"Chatbot"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ChatbotOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    query?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
    _count?: ChatbotCountOrderByAggregateInput
    _max?: ChatbotMaxOrderByAggregateInput
    _min?: ChatbotMinOrderByAggregateInput
  }

  export type ChatbotScalarWhereWithAggregatesInput = {
    AND?: ChatbotScalarWhereWithAggregatesInput | ChatbotScalarWhereWithAggregatesInput[]
    OR?: ChatbotScalarWhereWithAggregatesInput[]
    NOT?: ChatbotScalarWhereWithAggregatesInput | ChatbotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Chatbot"> | string
    userId?: StringNullableWithAggregatesFilter<"Chatbot"> | string | null
    sessionId?: StringWithAggregatesFilter<"Chatbot"> | string
    query?: StringWithAggregatesFilter<"Chatbot"> | string
    response?: StringWithAggregatesFilter<"Chatbot"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Chatbot"> | Date | string
  }

  export type TodoWhereInput = {
    AND?: TodoWhereInput | TodoWhereInput[]
    OR?: TodoWhereInput[]
    NOT?: TodoWhereInput | TodoWhereInput[]
    id?: StringFilter<"Todo"> | string
    todoId?: StringNullableFilter<"Todo"> | string | null
    userId?: StringFilter<"Todo"> | string
    activity?: StringNullableFilter<"Todo"> | string | null
    description?: StringNullableFilter<"Todo"> | string | null
    status?: StringNullableFilter<"Todo"> | string | null
    priority?: StringNullableFilter<"Todo"> | string | null
    dueDate?: StringNullableFilter<"Todo"> | string | null
    createdAt?: DateTimeFilter<"Todo"> | Date | string
    updatedAt?: DateTimeFilter<"Todo"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TodoOrderByWithRelationInput = {
    id?: SortOrder
    todoId?: SortOrder
    userId?: SortOrder
    activity?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TodoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    todoId?: string
    AND?: TodoWhereInput | TodoWhereInput[]
    OR?: TodoWhereInput[]
    NOT?: TodoWhereInput | TodoWhereInput[]
    userId?: StringFilter<"Todo"> | string
    activity?: StringNullableFilter<"Todo"> | string | null
    description?: StringNullableFilter<"Todo"> | string | null
    status?: StringNullableFilter<"Todo"> | string | null
    priority?: StringNullableFilter<"Todo"> | string | null
    dueDate?: StringNullableFilter<"Todo"> | string | null
    createdAt?: DateTimeFilter<"Todo"> | Date | string
    updatedAt?: DateTimeFilter<"Todo"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "todoId">

  export type TodoOrderByWithAggregationInput = {
    id?: SortOrder
    todoId?: SortOrder
    userId?: SortOrder
    activity?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TodoCountOrderByAggregateInput
    _max?: TodoMaxOrderByAggregateInput
    _min?: TodoMinOrderByAggregateInput
  }

  export type TodoScalarWhereWithAggregatesInput = {
    AND?: TodoScalarWhereWithAggregatesInput | TodoScalarWhereWithAggregatesInput[]
    OR?: TodoScalarWhereWithAggregatesInput[]
    NOT?: TodoScalarWhereWithAggregatesInput | TodoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Todo"> | string
    todoId?: StringNullableWithAggregatesFilter<"Todo"> | string | null
    userId?: StringWithAggregatesFilter<"Todo"> | string
    activity?: StringNullableWithAggregatesFilter<"Todo"> | string | null
    description?: StringNullableWithAggregatesFilter<"Todo"> | string | null
    status?: StringNullableWithAggregatesFilter<"Todo"> | string | null
    priority?: StringNullableWithAggregatesFilter<"Todo"> | string | null
    dueDate?: StringNullableWithAggregatesFilter<"Todo"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Todo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Todo"> | Date | string
  }

  export type AllowanceWhereInput = {
    AND?: AllowanceWhereInput | AllowanceWhereInput[]
    OR?: AllowanceWhereInput[]
    NOT?: AllowanceWhereInput | AllowanceWhereInput[]
    id?: StringFilter<"Allowance"> | string
    calculationId?: StringNullableFilter<"Allowance"> | string | null
    userId?: StringFilter<"Allowance"> | string
    jobDesignation?: StringNullableFilter<"Allowance"> | string | null
    basicPay?: FloatNullableFilter<"Allowance"> | number | null
    marriedStatus?: BoolNullableFilter<"Allowance"> | boolean | null
    distanceTravelled?: FloatNullableFilter<"Allowance"> | number | null
    vehicleIncluded?: JsonNullableFilter<"Allowance">
    result?: JsonNullableFilter<"Allowance">
    calculatedAt?: DateTimeNullableFilter<"Allowance"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AllowanceOrderByWithRelationInput = {
    id?: SortOrder
    calculationId?: SortOrder
    userId?: SortOrder
    jobDesignation?: SortOrder
    basicPay?: SortOrder
    marriedStatus?: SortOrder
    distanceTravelled?: SortOrder
    vehicleIncluded?: SortOrder
    result?: SortOrder
    calculatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AllowanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    calculationId?: string
    AND?: AllowanceWhereInput | AllowanceWhereInput[]
    OR?: AllowanceWhereInput[]
    NOT?: AllowanceWhereInput | AllowanceWhereInput[]
    userId?: StringFilter<"Allowance"> | string
    jobDesignation?: StringNullableFilter<"Allowance"> | string | null
    basicPay?: FloatNullableFilter<"Allowance"> | number | null
    marriedStatus?: BoolNullableFilter<"Allowance"> | boolean | null
    distanceTravelled?: FloatNullableFilter<"Allowance"> | number | null
    vehicleIncluded?: JsonNullableFilter<"Allowance">
    result?: JsonNullableFilter<"Allowance">
    calculatedAt?: DateTimeNullableFilter<"Allowance"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "calculationId">

  export type AllowanceOrderByWithAggregationInput = {
    id?: SortOrder
    calculationId?: SortOrder
    userId?: SortOrder
    jobDesignation?: SortOrder
    basicPay?: SortOrder
    marriedStatus?: SortOrder
    distanceTravelled?: SortOrder
    vehicleIncluded?: SortOrder
    result?: SortOrder
    calculatedAt?: SortOrder
    _count?: AllowanceCountOrderByAggregateInput
    _avg?: AllowanceAvgOrderByAggregateInput
    _max?: AllowanceMaxOrderByAggregateInput
    _min?: AllowanceMinOrderByAggregateInput
    _sum?: AllowanceSumOrderByAggregateInput
  }

  export type AllowanceScalarWhereWithAggregatesInput = {
    AND?: AllowanceScalarWhereWithAggregatesInput | AllowanceScalarWhereWithAggregatesInput[]
    OR?: AllowanceScalarWhereWithAggregatesInput[]
    NOT?: AllowanceScalarWhereWithAggregatesInput | AllowanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Allowance"> | string
    calculationId?: StringNullableWithAggregatesFilter<"Allowance"> | string | null
    userId?: StringWithAggregatesFilter<"Allowance"> | string
    jobDesignation?: StringNullableWithAggregatesFilter<"Allowance"> | string | null
    basicPay?: FloatNullableWithAggregatesFilter<"Allowance"> | number | null
    marriedStatus?: BoolNullableWithAggregatesFilter<"Allowance"> | boolean | null
    distanceTravelled?: FloatNullableWithAggregatesFilter<"Allowance"> | number | null
    vehicleIncluded?: JsonNullableWithAggregatesFilter<"Allowance">
    result?: JsonNullableWithAggregatesFilter<"Allowance">
    calculatedAt?: DateTimeNullableWithAggregatesFilter<"Allowance"> | Date | string | null
  }

  export type TDClaimChecklistWhereInput = {
    AND?: TDClaimChecklistWhereInput | TDClaimChecklistWhereInput[]
    OR?: TDClaimChecklistWhereInput[]
    NOT?: TDClaimChecklistWhereInput | TDClaimChecklistWhereInput[]
    id?: StringFilter<"TDClaimChecklist"> | string
    checklistID?: StringFilter<"TDClaimChecklist"> | string
    title?: StringNullableFilter<"TDClaimChecklist"> | string | null
    fileUrl?: StringFilter<"TDClaimChecklist"> | string
    createdAt?: DateTimeFilter<"TDClaimChecklist"> | Date | string
    updatedAt?: DateTimeFilter<"TDClaimChecklist"> | Date | string
  }

  export type TDClaimChecklistOrderByWithRelationInput = {
    id?: SortOrder
    checklistID?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDClaimChecklistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    checklistID?: string
    AND?: TDClaimChecklistWhereInput | TDClaimChecklistWhereInput[]
    OR?: TDClaimChecklistWhereInput[]
    NOT?: TDClaimChecklistWhereInput | TDClaimChecklistWhereInput[]
    title?: StringNullableFilter<"TDClaimChecklist"> | string | null
    fileUrl?: StringFilter<"TDClaimChecklist"> | string
    createdAt?: DateTimeFilter<"TDClaimChecklist"> | Date | string
    updatedAt?: DateTimeFilter<"TDClaimChecklist"> | Date | string
  }, "id" | "checklistID">

  export type TDClaimChecklistOrderByWithAggregationInput = {
    id?: SortOrder
    checklistID?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TDClaimChecklistCountOrderByAggregateInput
    _max?: TDClaimChecklistMaxOrderByAggregateInput
    _min?: TDClaimChecklistMinOrderByAggregateInput
  }

  export type TDClaimChecklistScalarWhereWithAggregatesInput = {
    AND?: TDClaimChecklistScalarWhereWithAggregatesInput | TDClaimChecklistScalarWhereWithAggregatesInput[]
    OR?: TDClaimChecklistScalarWhereWithAggregatesInput[]
    NOT?: TDClaimChecklistScalarWhereWithAggregatesInput | TDClaimChecklistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TDClaimChecklist"> | string
    checklistID?: StringWithAggregatesFilter<"TDClaimChecklist"> | string
    title?: StringNullableWithAggregatesFilter<"TDClaimChecklist"> | string | null
    fileUrl?: StringWithAggregatesFilter<"TDClaimChecklist"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TDClaimChecklist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TDClaimChecklist"> | Date | string
  }

  export type TDRatesWhereInput = {
    AND?: TDRatesWhereInput | TDRatesWhereInput[]
    OR?: TDRatesWhereInput[]
    NOT?: TDRatesWhereInput | TDRatesWhereInput[]
    id?: StringFilter<"TDRates"> | string
    tdRatesId?: StringFilter<"TDRates"> | string
    rankCategory?: StringNullableFilter<"TDRates"> | string | null
    hotelAllowance?: FloatFilter<"TDRates"> | number
    taxiAllowance?: FloatFilter<"TDRates"> | number
    foodAllowance?: FloatFilter<"TDRates"> | number
    createdAt?: DateTimeFilter<"TDRates"> | Date | string
    updatedAt?: DateTimeFilter<"TDRates"> | Date | string
  }

  export type TDRatesOrderByWithRelationInput = {
    id?: SortOrder
    tdRatesId?: SortOrder
    rankCategory?: SortOrder
    hotelAllowance?: SortOrder
    taxiAllowance?: SortOrder
    foodAllowance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDRatesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tdRatesId?: string
    AND?: TDRatesWhereInput | TDRatesWhereInput[]
    OR?: TDRatesWhereInput[]
    NOT?: TDRatesWhereInput | TDRatesWhereInput[]
    rankCategory?: StringNullableFilter<"TDRates"> | string | null
    hotelAllowance?: FloatFilter<"TDRates"> | number
    taxiAllowance?: FloatFilter<"TDRates"> | number
    foodAllowance?: FloatFilter<"TDRates"> | number
    createdAt?: DateTimeFilter<"TDRates"> | Date | string
    updatedAt?: DateTimeFilter<"TDRates"> | Date | string
  }, "id" | "tdRatesId">

  export type TDRatesOrderByWithAggregationInput = {
    id?: SortOrder
    tdRatesId?: SortOrder
    rankCategory?: SortOrder
    hotelAllowance?: SortOrder
    taxiAllowance?: SortOrder
    foodAllowance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TDRatesCountOrderByAggregateInput
    _avg?: TDRatesAvgOrderByAggregateInput
    _max?: TDRatesMaxOrderByAggregateInput
    _min?: TDRatesMinOrderByAggregateInput
    _sum?: TDRatesSumOrderByAggregateInput
  }

  export type TDRatesScalarWhereWithAggregatesInput = {
    AND?: TDRatesScalarWhereWithAggregatesInput | TDRatesScalarWhereWithAggregatesInput[]
    OR?: TDRatesScalarWhereWithAggregatesInput[]
    NOT?: TDRatesScalarWhereWithAggregatesInput | TDRatesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TDRates"> | string
    tdRatesId?: StringWithAggregatesFilter<"TDRates"> | string
    rankCategory?: StringNullableWithAggregatesFilter<"TDRates"> | string | null
    hotelAllowance?: FloatWithAggregatesFilter<"TDRates"> | number
    taxiAllowance?: FloatWithAggregatesFilter<"TDRates"> | number
    foodAllowance?: FloatWithAggregatesFilter<"TDRates"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TDRates"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TDRates"> | Date | string
  }

  export type TDRulesWhereInput = {
    AND?: TDRulesWhereInput | TDRulesWhereInput[]
    OR?: TDRulesWhereInput[]
    NOT?: TDRulesWhereInput | TDRulesWhereInput[]
    id?: StringFilter<"TDRules"> | string
    tdRulesId?: StringFilter<"TDRules"> | string
    ruleNumber?: StringFilter<"TDRules"> | string
    title?: StringFilter<"TDRules"> | string
    description?: StringNullableFilter<"TDRules"> | string | null
    iconUrl?: StringNullableFilter<"TDRules"> | string | null
    createdAt?: DateTimeFilter<"TDRules"> | Date | string
    updatedAt?: DateTimeFilter<"TDRules"> | Date | string
  }

  export type TDRulesOrderByWithRelationInput = {
    id?: SortOrder
    tdRulesId?: SortOrder
    ruleNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    iconUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDRulesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tdRulesId?: string
    AND?: TDRulesWhereInput | TDRulesWhereInput[]
    OR?: TDRulesWhereInput[]
    NOT?: TDRulesWhereInput | TDRulesWhereInput[]
    ruleNumber?: StringFilter<"TDRules"> | string
    title?: StringFilter<"TDRules"> | string
    description?: StringNullableFilter<"TDRules"> | string | null
    iconUrl?: StringNullableFilter<"TDRules"> | string | null
    createdAt?: DateTimeFilter<"TDRules"> | Date | string
    updatedAt?: DateTimeFilter<"TDRules"> | Date | string
  }, "id" | "tdRulesId">

  export type TDRulesOrderByWithAggregationInput = {
    id?: SortOrder
    tdRulesId?: SortOrder
    ruleNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    iconUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TDRulesCountOrderByAggregateInput
    _max?: TDRulesMaxOrderByAggregateInput
    _min?: TDRulesMinOrderByAggregateInput
  }

  export type TDRulesScalarWhereWithAggregatesInput = {
    AND?: TDRulesScalarWhereWithAggregatesInput | TDRulesScalarWhereWithAggregatesInput[]
    OR?: TDRulesScalarWhereWithAggregatesInput[]
    NOT?: TDRulesScalarWhereWithAggregatesInput | TDRulesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TDRules"> | string
    tdRulesId?: StringWithAggregatesFilter<"TDRules"> | string
    ruleNumber?: StringWithAggregatesFilter<"TDRules"> | string
    title?: StringWithAggregatesFilter<"TDRules"> | string
    description?: StringNullableWithAggregatesFilter<"TDRules"> | string | null
    iconUrl?: StringNullableWithAggregatesFilter<"TDRules"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TDRules"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TDRules"> | Date | string
  }

  export type UpskillCertificationWhereInput = {
    AND?: UpskillCertificationWhereInput | UpskillCertificationWhereInput[]
    OR?: UpskillCertificationWhereInput[]
    NOT?: UpskillCertificationWhereInput | UpskillCertificationWhereInput[]
    id?: StringFilter<"UpskillCertification"> | string
    certificationId?: StringFilter<"UpskillCertification"> | string
    type?: StringNullableFilter<"UpskillCertification"> | string | null
    course?: StringFilter<"UpskillCertification"> | string
    price?: FloatFilter<"UpskillCertification"> | number
    description?: StringFilter<"UpskillCertification"> | string
    image?: StringFilter<"UpskillCertification"> | string
    createdAt?: DateTimeFilter<"UpskillCertification"> | Date | string
    updatedAt?: DateTimeFilter<"UpskillCertification"> | Date | string
    tax?: FloatNullableFilter<"UpskillCertification"> | number | null
    discount?: FloatNullableFilter<"UpskillCertification"> | number | null
    upskillEnrollments?: UpSkillEnrollmentListRelationFilter
  }

  export type UpskillCertificationOrderByWithRelationInput = {
    id?: SortOrder
    certificationId?: SortOrder
    type?: SortOrder
    course?: SortOrder
    price?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
    upskillEnrollments?: UpSkillEnrollmentOrderByRelationAggregateInput
  }

  export type UpskillCertificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    certificationId?: string
    AND?: UpskillCertificationWhereInput | UpskillCertificationWhereInput[]
    OR?: UpskillCertificationWhereInput[]
    NOT?: UpskillCertificationWhereInput | UpskillCertificationWhereInput[]
    type?: StringNullableFilter<"UpskillCertification"> | string | null
    course?: StringFilter<"UpskillCertification"> | string
    price?: FloatFilter<"UpskillCertification"> | number
    description?: StringFilter<"UpskillCertification"> | string
    image?: StringFilter<"UpskillCertification"> | string
    createdAt?: DateTimeFilter<"UpskillCertification"> | Date | string
    updatedAt?: DateTimeFilter<"UpskillCertification"> | Date | string
    tax?: FloatNullableFilter<"UpskillCertification"> | number | null
    discount?: FloatNullableFilter<"UpskillCertification"> | number | null
    upskillEnrollments?: UpSkillEnrollmentListRelationFilter
  }, "id" | "certificationId">

  export type UpskillCertificationOrderByWithAggregationInput = {
    id?: SortOrder
    certificationId?: SortOrder
    type?: SortOrder
    course?: SortOrder
    price?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
    _count?: UpskillCertificationCountOrderByAggregateInput
    _avg?: UpskillCertificationAvgOrderByAggregateInput
    _max?: UpskillCertificationMaxOrderByAggregateInput
    _min?: UpskillCertificationMinOrderByAggregateInput
    _sum?: UpskillCertificationSumOrderByAggregateInput
  }

  export type UpskillCertificationScalarWhereWithAggregatesInput = {
    AND?: UpskillCertificationScalarWhereWithAggregatesInput | UpskillCertificationScalarWhereWithAggregatesInput[]
    OR?: UpskillCertificationScalarWhereWithAggregatesInput[]
    NOT?: UpskillCertificationScalarWhereWithAggregatesInput | UpskillCertificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UpskillCertification"> | string
    certificationId?: StringWithAggregatesFilter<"UpskillCertification"> | string
    type?: StringNullableWithAggregatesFilter<"UpskillCertification"> | string | null
    course?: StringWithAggregatesFilter<"UpskillCertification"> | string
    price?: FloatWithAggregatesFilter<"UpskillCertification"> | number
    description?: StringWithAggregatesFilter<"UpskillCertification"> | string
    image?: StringWithAggregatesFilter<"UpskillCertification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UpskillCertification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UpskillCertification"> | Date | string
    tax?: FloatNullableWithAggregatesFilter<"UpskillCertification"> | number | null
    discount?: FloatNullableWithAggregatesFilter<"UpskillCertification"> | number | null
  }

  export type UpSkillEnrollmentWhereInput = {
    AND?: UpSkillEnrollmentWhereInput | UpSkillEnrollmentWhereInput[]
    OR?: UpSkillEnrollmentWhereInput[]
    NOT?: UpSkillEnrollmentWhereInput | UpSkillEnrollmentWhereInput[]
    id?: StringFilter<"UpSkillEnrollment"> | string
    applicationId?: StringNullableFilter<"UpSkillEnrollment"> | string | null
    certificationId?: StringFilter<"UpSkillEnrollment"> | string
    name?: StringFilter<"UpSkillEnrollment"> | string
    email?: StringFilter<"UpSkillEnrollment"> | string
    phone?: StringFilter<"UpSkillEnrollment"> | string
    verificationStatus?: EnumVerificationStatusFilter<"UpSkillEnrollment"> | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFilter<"UpSkillEnrollment"> | $Enums.InterestStatus
    description?: StringNullableFilter<"UpSkillEnrollment"> | string | null
    createdAt?: DateTimeFilter<"UpSkillEnrollment"> | Date | string
    updatedAt?: DateTimeFilter<"UpSkillEnrollment"> | Date | string
    userId?: StringNullableFilter<"UpSkillEnrollment"> | string | null
    certification?: XOR<UpskillCertificationScalarRelationFilter, UpskillCertificationWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type UpSkillEnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    certificationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    verificationStatus?: SortOrder
    interestStatus?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    certification?: UpskillCertificationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UpSkillEnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: UpSkillEnrollmentWhereInput | UpSkillEnrollmentWhereInput[]
    OR?: UpSkillEnrollmentWhereInput[]
    NOT?: UpSkillEnrollmentWhereInput | UpSkillEnrollmentWhereInput[]
    certificationId?: StringFilter<"UpSkillEnrollment"> | string
    name?: StringFilter<"UpSkillEnrollment"> | string
    email?: StringFilter<"UpSkillEnrollment"> | string
    phone?: StringFilter<"UpSkillEnrollment"> | string
    verificationStatus?: EnumVerificationStatusFilter<"UpSkillEnrollment"> | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFilter<"UpSkillEnrollment"> | $Enums.InterestStatus
    description?: StringNullableFilter<"UpSkillEnrollment"> | string | null
    createdAt?: DateTimeFilter<"UpSkillEnrollment"> | Date | string
    updatedAt?: DateTimeFilter<"UpSkillEnrollment"> | Date | string
    userId?: StringNullableFilter<"UpSkillEnrollment"> | string | null
    certification?: XOR<UpskillCertificationScalarRelationFilter, UpskillCertificationWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "applicationId">

  export type UpSkillEnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    certificationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    verificationStatus?: SortOrder
    interestStatus?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: UpSkillEnrollmentCountOrderByAggregateInput
    _max?: UpSkillEnrollmentMaxOrderByAggregateInput
    _min?: UpSkillEnrollmentMinOrderByAggregateInput
  }

  export type UpSkillEnrollmentScalarWhereWithAggregatesInput = {
    AND?: UpSkillEnrollmentScalarWhereWithAggregatesInput | UpSkillEnrollmentScalarWhereWithAggregatesInput[]
    OR?: UpSkillEnrollmentScalarWhereWithAggregatesInput[]
    NOT?: UpSkillEnrollmentScalarWhereWithAggregatesInput | UpSkillEnrollmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UpSkillEnrollment"> | string
    applicationId?: StringNullableWithAggregatesFilter<"UpSkillEnrollment"> | string | null
    certificationId?: StringWithAggregatesFilter<"UpSkillEnrollment"> | string
    name?: StringWithAggregatesFilter<"UpSkillEnrollment"> | string
    email?: StringWithAggregatesFilter<"UpSkillEnrollment"> | string
    phone?: StringWithAggregatesFilter<"UpSkillEnrollment"> | string
    verificationStatus?: EnumVerificationStatusWithAggregatesFilter<"UpSkillEnrollment"> | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusWithAggregatesFilter<"UpSkillEnrollment"> | $Enums.InterestStatus
    description?: StringNullableWithAggregatesFilter<"UpSkillEnrollment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UpSkillEnrollment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UpSkillEnrollment"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"UpSkillEnrollment"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todos?: TodoCreateNestedManyWithoutUserInput
    allowances?: AllowanceCreateNestedManyWithoutUserInput
    enrollments?: UpSkillEnrollmentCreateNestedManyWithoutUserInput
    chatbots?: ChatbotCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todos?: TodoUncheckedCreateNestedManyWithoutUserInput
    allowances?: AllowanceUncheckedCreateNestedManyWithoutUserInput
    enrollments?: UpSkillEnrollmentUncheckedCreateNestedManyWithoutUserInput
    chatbots?: ChatbotUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todos?: TodoUpdateManyWithoutUserNestedInput
    allowances?: AllowanceUpdateManyWithoutUserNestedInput
    enrollments?: UpSkillEnrollmentUpdateManyWithoutUserNestedInput
    chatbots?: ChatbotUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todos?: TodoUncheckedUpdateManyWithoutUserNestedInput
    allowances?: AllowanceUncheckedUpdateManyWithoutUserNestedInput
    enrollments?: UpSkillEnrollmentUncheckedUpdateManyWithoutUserNestedInput
    chatbots?: ChatbotUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotCreateInput = {
    id?: string
    sessionId: string
    query: string
    response: string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutChatbotsInput
  }

  export type ChatbotUncheckedCreateInput = {
    id?: string
    userId?: string | null
    sessionId: string
    query: string
    response: string
    createdAt?: Date | string
  }

  export type ChatbotUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutChatbotsNestedInput
  }

  export type ChatbotUncheckedUpdateInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotCreateManyInput = {
    id?: string
    userId?: string | null
    sessionId: string
    query: string
    response: string
    createdAt?: Date | string
  }

  export type ChatbotUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotUncheckedUpdateManyInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoCreateInput = {
    id?: string
    todoId?: string | null
    activity?: string | null
    description?: string | null
    status?: string | null
    priority?: string | null
    dueDate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTodosInput
  }

  export type TodoUncheckedCreateInput = {
    id?: string
    todoId?: string | null
    userId: string
    activity?: string | null
    description?: string | null
    status?: string | null
    priority?: string | null
    dueDate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoUpdateInput = {
    todoId?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTodosNestedInput
  }

  export type TodoUncheckedUpdateInput = {
    todoId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoCreateManyInput = {
    id?: string
    todoId?: string | null
    userId: string
    activity?: string | null
    description?: string | null
    status?: string | null
    priority?: string | null
    dueDate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoUpdateManyMutationInput = {
    todoId?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoUncheckedUpdateManyInput = {
    todoId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllowanceCreateInput = {
    id?: string
    calculationId?: string | null
    jobDesignation?: string | null
    basicPay?: number | null
    marriedStatus?: boolean | null
    distanceTravelled?: number | null
    vehicleIncluded?: InputJsonValue | null
    result?: InputJsonValue | null
    calculatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutAllowancesInput
  }

  export type AllowanceUncheckedCreateInput = {
    id?: string
    calculationId?: string | null
    userId: string
    jobDesignation?: string | null
    basicPay?: number | null
    marriedStatus?: boolean | null
    distanceTravelled?: number | null
    vehicleIncluded?: InputJsonValue | null
    result?: InputJsonValue | null
    calculatedAt?: Date | string | null
  }

  export type AllowanceUpdateInput = {
    calculationId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDesignation?: NullableStringFieldUpdateOperationsInput | string | null
    basicPay?: NullableFloatFieldUpdateOperationsInput | number | null
    marriedStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    distanceTravelled?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleIncluded?: InputJsonValue | InputJsonValue | null
    result?: InputJsonValue | InputJsonValue | null
    calculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAllowancesNestedInput
  }

  export type AllowanceUncheckedUpdateInput = {
    calculationId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    jobDesignation?: NullableStringFieldUpdateOperationsInput | string | null
    basicPay?: NullableFloatFieldUpdateOperationsInput | number | null
    marriedStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    distanceTravelled?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleIncluded?: InputJsonValue | InputJsonValue | null
    result?: InputJsonValue | InputJsonValue | null
    calculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AllowanceCreateManyInput = {
    id?: string
    calculationId?: string | null
    userId: string
    jobDesignation?: string | null
    basicPay?: number | null
    marriedStatus?: boolean | null
    distanceTravelled?: number | null
    vehicleIncluded?: InputJsonValue | null
    result?: InputJsonValue | null
    calculatedAt?: Date | string | null
  }

  export type AllowanceUpdateManyMutationInput = {
    calculationId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDesignation?: NullableStringFieldUpdateOperationsInput | string | null
    basicPay?: NullableFloatFieldUpdateOperationsInput | number | null
    marriedStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    distanceTravelled?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleIncluded?: InputJsonValue | InputJsonValue | null
    result?: InputJsonValue | InputJsonValue | null
    calculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AllowanceUncheckedUpdateManyInput = {
    calculationId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    jobDesignation?: NullableStringFieldUpdateOperationsInput | string | null
    basicPay?: NullableFloatFieldUpdateOperationsInput | number | null
    marriedStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    distanceTravelled?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleIncluded?: InputJsonValue | InputJsonValue | null
    result?: InputJsonValue | InputJsonValue | null
    calculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TDClaimChecklistCreateInput = {
    id?: string
    checklistID?: string
    title?: string | null
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDClaimChecklistUncheckedCreateInput = {
    id?: string
    checklistID?: string
    title?: string | null
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDClaimChecklistUpdateInput = {
    checklistID?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDClaimChecklistUncheckedUpdateInput = {
    checklistID?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDClaimChecklistCreateManyInput = {
    id?: string
    checklistID?: string
    title?: string | null
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDClaimChecklistUpdateManyMutationInput = {
    checklistID?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDClaimChecklistUncheckedUpdateManyInput = {
    checklistID?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDRatesCreateInput = {
    id?: string
    tdRatesId?: string
    rankCategory?: string | null
    hotelAllowance: number
    taxiAllowance: number
    foodAllowance: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDRatesUncheckedCreateInput = {
    id?: string
    tdRatesId?: string
    rankCategory?: string | null
    hotelAllowance: number
    taxiAllowance: number
    foodAllowance: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDRatesUpdateInput = {
    tdRatesId?: StringFieldUpdateOperationsInput | string
    rankCategory?: NullableStringFieldUpdateOperationsInput | string | null
    hotelAllowance?: FloatFieldUpdateOperationsInput | number
    taxiAllowance?: FloatFieldUpdateOperationsInput | number
    foodAllowance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDRatesUncheckedUpdateInput = {
    tdRatesId?: StringFieldUpdateOperationsInput | string
    rankCategory?: NullableStringFieldUpdateOperationsInput | string | null
    hotelAllowance?: FloatFieldUpdateOperationsInput | number
    taxiAllowance?: FloatFieldUpdateOperationsInput | number
    foodAllowance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDRatesCreateManyInput = {
    id?: string
    tdRatesId?: string
    rankCategory?: string | null
    hotelAllowance: number
    taxiAllowance: number
    foodAllowance: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDRatesUpdateManyMutationInput = {
    tdRatesId?: StringFieldUpdateOperationsInput | string
    rankCategory?: NullableStringFieldUpdateOperationsInput | string | null
    hotelAllowance?: FloatFieldUpdateOperationsInput | number
    taxiAllowance?: FloatFieldUpdateOperationsInput | number
    foodAllowance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDRatesUncheckedUpdateManyInput = {
    tdRatesId?: StringFieldUpdateOperationsInput | string
    rankCategory?: NullableStringFieldUpdateOperationsInput | string | null
    hotelAllowance?: FloatFieldUpdateOperationsInput | number
    taxiAllowance?: FloatFieldUpdateOperationsInput | number
    foodAllowance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDRulesCreateInput = {
    id?: string
    tdRulesId?: string
    ruleNumber: string
    title: string
    description?: string | null
    iconUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDRulesUncheckedCreateInput = {
    id?: string
    tdRulesId?: string
    ruleNumber: string
    title: string
    description?: string | null
    iconUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDRulesUpdateInput = {
    tdRulesId?: StringFieldUpdateOperationsInput | string
    ruleNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDRulesUncheckedUpdateInput = {
    tdRulesId?: StringFieldUpdateOperationsInput | string
    ruleNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDRulesCreateManyInput = {
    id?: string
    tdRulesId?: string
    ruleNumber: string
    title: string
    description?: string | null
    iconUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TDRulesUpdateManyMutationInput = {
    tdRulesId?: StringFieldUpdateOperationsInput | string
    ruleNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TDRulesUncheckedUpdateManyInput = {
    tdRulesId?: StringFieldUpdateOperationsInput | string
    ruleNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UpskillCertificationCreateInput = {
    id?: string
    certificationId?: string
    type?: string | null
    course: string
    price: number
    description: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tax?: number | null
    discount?: number | null
    upskillEnrollments?: UpSkillEnrollmentCreateNestedManyWithoutCertificationInput
  }

  export type UpskillCertificationUncheckedCreateInput = {
    id?: string
    certificationId?: string
    type?: string | null
    course: string
    price: number
    description: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tax?: number | null
    discount?: number | null
    upskillEnrollments?: UpSkillEnrollmentUncheckedCreateNestedManyWithoutCertificationInput
  }

  export type UpskillCertificationUpdateInput = {
    certificationId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    course?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    upskillEnrollments?: UpSkillEnrollmentUpdateManyWithoutCertificationNestedInput
  }

  export type UpskillCertificationUncheckedUpdateInput = {
    certificationId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    course?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    upskillEnrollments?: UpSkillEnrollmentUncheckedUpdateManyWithoutCertificationNestedInput
  }

  export type UpskillCertificationCreateManyInput = {
    id?: string
    certificationId?: string
    type?: string | null
    course: string
    price: number
    description: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tax?: number | null
    discount?: number | null
  }

  export type UpskillCertificationUpdateManyMutationInput = {
    certificationId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    course?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UpskillCertificationUncheckedUpdateManyInput = {
    certificationId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    course?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UpSkillEnrollmentCreateInput = {
    id?: string
    applicationId?: string | null
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    certification: UpskillCertificationCreateNestedOneWithoutUpskillEnrollmentsInput
    user?: UserCreateNestedOneWithoutEnrollmentsInput
  }

  export type UpSkillEnrollmentUncheckedCreateInput = {
    id?: string
    applicationId?: string | null
    certificationId: string
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type UpSkillEnrollmentUpdateInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certification?: UpskillCertificationUpdateOneRequiredWithoutUpskillEnrollmentsNestedInput
    user?: UserUpdateOneWithoutEnrollmentsNestedInput
  }

  export type UpSkillEnrollmentUncheckedUpdateInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    certificationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UpSkillEnrollmentCreateManyInput = {
    id?: string
    applicationId?: string | null
    certificationId: string
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type UpSkillEnrollmentUpdateManyMutationInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UpSkillEnrollmentUncheckedUpdateManyInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    certificationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TodoListRelationFilter = {
    every?: TodoWhereInput
    some?: TodoWhereInput
    none?: TodoWhereInput
  }

  export type AllowanceListRelationFilter = {
    every?: AllowanceWhereInput
    some?: AllowanceWhereInput
    none?: AllowanceWhereInput
  }

  export type UpSkillEnrollmentListRelationFilter = {
    every?: UpSkillEnrollmentWhereInput
    some?: UpSkillEnrollmentWhereInput
    none?: UpSkillEnrollmentWhereInput
  }

  export type ChatbotListRelationFilter = {
    every?: ChatbotWhereInput
    some?: ChatbotWhereInput
    none?: ChatbotWhereInput
  }

  export type TodoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AllowanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UpSkillEnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatbotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    armyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    armyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    armyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ChatbotCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    query?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatbotMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    query?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatbotMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    query?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TodoCountOrderByAggregateInput = {
    id?: SortOrder
    todoId?: SortOrder
    userId?: SortOrder
    activity?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoMaxOrderByAggregateInput = {
    id?: SortOrder
    todoId?: SortOrder
    userId?: SortOrder
    activity?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoMinOrderByAggregateInput = {
    id?: SortOrder
    todoId?: SortOrder
    userId?: SortOrder
    activity?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
    isSet?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type AllowanceCountOrderByAggregateInput = {
    id?: SortOrder
    calculationId?: SortOrder
    userId?: SortOrder
    jobDesignation?: SortOrder
    basicPay?: SortOrder
    marriedStatus?: SortOrder
    distanceTravelled?: SortOrder
    vehicleIncluded?: SortOrder
    result?: SortOrder
    calculatedAt?: SortOrder
  }

  export type AllowanceAvgOrderByAggregateInput = {
    basicPay?: SortOrder
    distanceTravelled?: SortOrder
  }

  export type AllowanceMaxOrderByAggregateInput = {
    id?: SortOrder
    calculationId?: SortOrder
    userId?: SortOrder
    jobDesignation?: SortOrder
    basicPay?: SortOrder
    marriedStatus?: SortOrder
    distanceTravelled?: SortOrder
    calculatedAt?: SortOrder
  }

  export type AllowanceMinOrderByAggregateInput = {
    id?: SortOrder
    calculationId?: SortOrder
    userId?: SortOrder
    jobDesignation?: SortOrder
    basicPay?: SortOrder
    marriedStatus?: SortOrder
    distanceTravelled?: SortOrder
    calculatedAt?: SortOrder
  }

  export type AllowanceSumOrderByAggregateInput = {
    basicPay?: SortOrder
    distanceTravelled?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
    isSet?: boolean
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type TDClaimChecklistCountOrderByAggregateInput = {
    id?: SortOrder
    checklistID?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDClaimChecklistMaxOrderByAggregateInput = {
    id?: SortOrder
    checklistID?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDClaimChecklistMinOrderByAggregateInput = {
    id?: SortOrder
    checklistID?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type TDRatesCountOrderByAggregateInput = {
    id?: SortOrder
    tdRatesId?: SortOrder
    rankCategory?: SortOrder
    hotelAllowance?: SortOrder
    taxiAllowance?: SortOrder
    foodAllowance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDRatesAvgOrderByAggregateInput = {
    hotelAllowance?: SortOrder
    taxiAllowance?: SortOrder
    foodAllowance?: SortOrder
  }

  export type TDRatesMaxOrderByAggregateInput = {
    id?: SortOrder
    tdRatesId?: SortOrder
    rankCategory?: SortOrder
    hotelAllowance?: SortOrder
    taxiAllowance?: SortOrder
    foodAllowance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDRatesMinOrderByAggregateInput = {
    id?: SortOrder
    tdRatesId?: SortOrder
    rankCategory?: SortOrder
    hotelAllowance?: SortOrder
    taxiAllowance?: SortOrder
    foodAllowance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDRatesSumOrderByAggregateInput = {
    hotelAllowance?: SortOrder
    taxiAllowance?: SortOrder
    foodAllowance?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TDRulesCountOrderByAggregateInput = {
    id?: SortOrder
    tdRulesId?: SortOrder
    ruleNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    iconUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDRulesMaxOrderByAggregateInput = {
    id?: SortOrder
    tdRulesId?: SortOrder
    ruleNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    iconUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TDRulesMinOrderByAggregateInput = {
    id?: SortOrder
    tdRulesId?: SortOrder
    ruleNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    iconUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UpskillCertificationCountOrderByAggregateInput = {
    id?: SortOrder
    certificationId?: SortOrder
    type?: SortOrder
    course?: SortOrder
    price?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
  }

  export type UpskillCertificationAvgOrderByAggregateInput = {
    price?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
  }

  export type UpskillCertificationMaxOrderByAggregateInput = {
    id?: SortOrder
    certificationId?: SortOrder
    type?: SortOrder
    course?: SortOrder
    price?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
  }

  export type UpskillCertificationMinOrderByAggregateInput = {
    id?: SortOrder
    certificationId?: SortOrder
    type?: SortOrder
    course?: SortOrder
    price?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
  }

  export type UpskillCertificationSumOrderByAggregateInput = {
    price?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
  }

  export type EnumVerificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusFilter<$PrismaModel> | $Enums.VerificationStatus
  }

  export type EnumInterestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InterestStatus | EnumInterestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterestStatus[] | ListEnumInterestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterestStatus[] | ListEnumInterestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterestStatusFilter<$PrismaModel> | $Enums.InterestStatus
  }

  export type UpskillCertificationScalarRelationFilter = {
    is?: UpskillCertificationWhereInput
    isNot?: UpskillCertificationWhereInput
  }

  export type UpSkillEnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    certificationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    verificationStatus?: SortOrder
    interestStatus?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type UpSkillEnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    certificationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    verificationStatus?: SortOrder
    interestStatus?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type UpSkillEnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    certificationId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    verificationStatus?: SortOrder
    interestStatus?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type EnumVerificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.VerificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVerificationStatusFilter<$PrismaModel>
    _max?: NestedEnumVerificationStatusFilter<$PrismaModel>
  }

  export type EnumInterestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterestStatus | EnumInterestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterestStatus[] | ListEnumInterestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterestStatus[] | ListEnumInterestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterestStatusWithAggregatesFilter<$PrismaModel> | $Enums.InterestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterestStatusFilter<$PrismaModel>
    _max?: NestedEnumInterestStatusFilter<$PrismaModel>
  }

  export type TodoCreateNestedManyWithoutUserInput = {
    create?: XOR<TodoCreateWithoutUserInput, TodoUncheckedCreateWithoutUserInput> | TodoCreateWithoutUserInput[] | TodoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TodoCreateOrConnectWithoutUserInput | TodoCreateOrConnectWithoutUserInput[]
    createMany?: TodoCreateManyUserInputEnvelope
    connect?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
  }

  export type AllowanceCreateNestedManyWithoutUserInput = {
    create?: XOR<AllowanceCreateWithoutUserInput, AllowanceUncheckedCreateWithoutUserInput> | AllowanceCreateWithoutUserInput[] | AllowanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AllowanceCreateOrConnectWithoutUserInput | AllowanceCreateOrConnectWithoutUserInput[]
    createMany?: AllowanceCreateManyUserInputEnvelope
    connect?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
  }

  export type UpSkillEnrollmentCreateNestedManyWithoutUserInput = {
    create?: XOR<UpSkillEnrollmentCreateWithoutUserInput, UpSkillEnrollmentUncheckedCreateWithoutUserInput> | UpSkillEnrollmentCreateWithoutUserInput[] | UpSkillEnrollmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UpSkillEnrollmentCreateOrConnectWithoutUserInput | UpSkillEnrollmentCreateOrConnectWithoutUserInput[]
    createMany?: UpSkillEnrollmentCreateManyUserInputEnvelope
    connect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
  }

  export type ChatbotCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatbotCreateWithoutUserInput, ChatbotUncheckedCreateWithoutUserInput> | ChatbotCreateWithoutUserInput[] | ChatbotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatbotCreateOrConnectWithoutUserInput | ChatbotCreateOrConnectWithoutUserInput[]
    createMany?: ChatbotCreateManyUserInputEnvelope
    connect?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
  }

  export type TodoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TodoCreateWithoutUserInput, TodoUncheckedCreateWithoutUserInput> | TodoCreateWithoutUserInput[] | TodoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TodoCreateOrConnectWithoutUserInput | TodoCreateOrConnectWithoutUserInput[]
    createMany?: TodoCreateManyUserInputEnvelope
    connect?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
  }

  export type AllowanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AllowanceCreateWithoutUserInput, AllowanceUncheckedCreateWithoutUserInput> | AllowanceCreateWithoutUserInput[] | AllowanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AllowanceCreateOrConnectWithoutUserInput | AllowanceCreateOrConnectWithoutUserInput[]
    createMany?: AllowanceCreateManyUserInputEnvelope
    connect?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
  }

  export type UpSkillEnrollmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UpSkillEnrollmentCreateWithoutUserInput, UpSkillEnrollmentUncheckedCreateWithoutUserInput> | UpSkillEnrollmentCreateWithoutUserInput[] | UpSkillEnrollmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UpSkillEnrollmentCreateOrConnectWithoutUserInput | UpSkillEnrollmentCreateOrConnectWithoutUserInput[]
    createMany?: UpSkillEnrollmentCreateManyUserInputEnvelope
    connect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
  }

  export type ChatbotUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatbotCreateWithoutUserInput, ChatbotUncheckedCreateWithoutUserInput> | ChatbotCreateWithoutUserInput[] | ChatbotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatbotCreateOrConnectWithoutUserInput | ChatbotCreateOrConnectWithoutUserInput[]
    createMany?: ChatbotCreateManyUserInputEnvelope
    connect?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TodoUpdateManyWithoutUserNestedInput = {
    create?: XOR<TodoCreateWithoutUserInput, TodoUncheckedCreateWithoutUserInput> | TodoCreateWithoutUserInput[] | TodoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TodoCreateOrConnectWithoutUserInput | TodoCreateOrConnectWithoutUserInput[]
    upsert?: TodoUpsertWithWhereUniqueWithoutUserInput | TodoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TodoCreateManyUserInputEnvelope
    set?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
    disconnect?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
    delete?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
    connect?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
    update?: TodoUpdateWithWhereUniqueWithoutUserInput | TodoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TodoUpdateManyWithWhereWithoutUserInput | TodoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TodoScalarWhereInput | TodoScalarWhereInput[]
  }

  export type AllowanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<AllowanceCreateWithoutUserInput, AllowanceUncheckedCreateWithoutUserInput> | AllowanceCreateWithoutUserInput[] | AllowanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AllowanceCreateOrConnectWithoutUserInput | AllowanceCreateOrConnectWithoutUserInput[]
    upsert?: AllowanceUpsertWithWhereUniqueWithoutUserInput | AllowanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AllowanceCreateManyUserInputEnvelope
    set?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
    disconnect?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
    delete?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
    connect?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
    update?: AllowanceUpdateWithWhereUniqueWithoutUserInput | AllowanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AllowanceUpdateManyWithWhereWithoutUserInput | AllowanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AllowanceScalarWhereInput | AllowanceScalarWhereInput[]
  }

  export type UpSkillEnrollmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<UpSkillEnrollmentCreateWithoutUserInput, UpSkillEnrollmentUncheckedCreateWithoutUserInput> | UpSkillEnrollmentCreateWithoutUserInput[] | UpSkillEnrollmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UpSkillEnrollmentCreateOrConnectWithoutUserInput | UpSkillEnrollmentCreateOrConnectWithoutUserInput[]
    upsert?: UpSkillEnrollmentUpsertWithWhereUniqueWithoutUserInput | UpSkillEnrollmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UpSkillEnrollmentCreateManyUserInputEnvelope
    set?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    disconnect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    delete?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    connect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    update?: UpSkillEnrollmentUpdateWithWhereUniqueWithoutUserInput | UpSkillEnrollmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UpSkillEnrollmentUpdateManyWithWhereWithoutUserInput | UpSkillEnrollmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UpSkillEnrollmentScalarWhereInput | UpSkillEnrollmentScalarWhereInput[]
  }

  export type ChatbotUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatbotCreateWithoutUserInput, ChatbotUncheckedCreateWithoutUserInput> | ChatbotCreateWithoutUserInput[] | ChatbotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatbotCreateOrConnectWithoutUserInput | ChatbotCreateOrConnectWithoutUserInput[]
    upsert?: ChatbotUpsertWithWhereUniqueWithoutUserInput | ChatbotUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatbotCreateManyUserInputEnvelope
    set?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
    disconnect?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
    delete?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
    connect?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
    update?: ChatbotUpdateWithWhereUniqueWithoutUserInput | ChatbotUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatbotUpdateManyWithWhereWithoutUserInput | ChatbotUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatbotScalarWhereInput | ChatbotScalarWhereInput[]
  }

  export type TodoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TodoCreateWithoutUserInput, TodoUncheckedCreateWithoutUserInput> | TodoCreateWithoutUserInput[] | TodoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TodoCreateOrConnectWithoutUserInput | TodoCreateOrConnectWithoutUserInput[]
    upsert?: TodoUpsertWithWhereUniqueWithoutUserInput | TodoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TodoCreateManyUserInputEnvelope
    set?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
    disconnect?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
    delete?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
    connect?: TodoWhereUniqueInput | TodoWhereUniqueInput[]
    update?: TodoUpdateWithWhereUniqueWithoutUserInput | TodoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TodoUpdateManyWithWhereWithoutUserInput | TodoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TodoScalarWhereInput | TodoScalarWhereInput[]
  }

  export type AllowanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AllowanceCreateWithoutUserInput, AllowanceUncheckedCreateWithoutUserInput> | AllowanceCreateWithoutUserInput[] | AllowanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AllowanceCreateOrConnectWithoutUserInput | AllowanceCreateOrConnectWithoutUserInput[]
    upsert?: AllowanceUpsertWithWhereUniqueWithoutUserInput | AllowanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AllowanceCreateManyUserInputEnvelope
    set?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
    disconnect?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
    delete?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
    connect?: AllowanceWhereUniqueInput | AllowanceWhereUniqueInput[]
    update?: AllowanceUpdateWithWhereUniqueWithoutUserInput | AllowanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AllowanceUpdateManyWithWhereWithoutUserInput | AllowanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AllowanceScalarWhereInput | AllowanceScalarWhereInput[]
  }

  export type UpSkillEnrollmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UpSkillEnrollmentCreateWithoutUserInput, UpSkillEnrollmentUncheckedCreateWithoutUserInput> | UpSkillEnrollmentCreateWithoutUserInput[] | UpSkillEnrollmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UpSkillEnrollmentCreateOrConnectWithoutUserInput | UpSkillEnrollmentCreateOrConnectWithoutUserInput[]
    upsert?: UpSkillEnrollmentUpsertWithWhereUniqueWithoutUserInput | UpSkillEnrollmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UpSkillEnrollmentCreateManyUserInputEnvelope
    set?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    disconnect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    delete?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    connect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    update?: UpSkillEnrollmentUpdateWithWhereUniqueWithoutUserInput | UpSkillEnrollmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UpSkillEnrollmentUpdateManyWithWhereWithoutUserInput | UpSkillEnrollmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UpSkillEnrollmentScalarWhereInput | UpSkillEnrollmentScalarWhereInput[]
  }

  export type ChatbotUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatbotCreateWithoutUserInput, ChatbotUncheckedCreateWithoutUserInput> | ChatbotCreateWithoutUserInput[] | ChatbotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatbotCreateOrConnectWithoutUserInput | ChatbotCreateOrConnectWithoutUserInput[]
    upsert?: ChatbotUpsertWithWhereUniqueWithoutUserInput | ChatbotUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatbotCreateManyUserInputEnvelope
    set?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
    disconnect?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
    delete?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
    connect?: ChatbotWhereUniqueInput | ChatbotWhereUniqueInput[]
    update?: ChatbotUpdateWithWhereUniqueWithoutUserInput | ChatbotUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatbotUpdateManyWithWhereWithoutUserInput | ChatbotUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatbotScalarWhereInput | ChatbotScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutChatbotsInput = {
    create?: XOR<UserCreateWithoutChatbotsInput, UserUncheckedCreateWithoutChatbotsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatbotsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneWithoutChatbotsNestedInput = {
    create?: XOR<UserCreateWithoutChatbotsInput, UserUncheckedCreateWithoutChatbotsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatbotsInput
    upsert?: UserUpsertWithoutChatbotsInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatbotsInput, UserUpdateWithoutChatbotsInput>, UserUncheckedUpdateWithoutChatbotsInput>
  }

  export type UserCreateNestedOneWithoutTodosInput = {
    create?: XOR<UserCreateWithoutTodosInput, UserUncheckedCreateWithoutTodosInput>
    connectOrCreate?: UserCreateOrConnectWithoutTodosInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTodosNestedInput = {
    create?: XOR<UserCreateWithoutTodosInput, UserUncheckedCreateWithoutTodosInput>
    connectOrCreate?: UserCreateOrConnectWithoutTodosInput
    upsert?: UserUpsertWithoutTodosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTodosInput, UserUpdateWithoutTodosInput>, UserUncheckedUpdateWithoutTodosInput>
  }

  export type UserCreateNestedOneWithoutAllowancesInput = {
    create?: XOR<UserCreateWithoutAllowancesInput, UserUncheckedCreateWithoutAllowancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAllowancesInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
    unset?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type UserUpdateOneRequiredWithoutAllowancesNestedInput = {
    create?: XOR<UserCreateWithoutAllowancesInput, UserUncheckedCreateWithoutAllowancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAllowancesInput
    upsert?: UserUpsertWithoutAllowancesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAllowancesInput, UserUpdateWithoutAllowancesInput>, UserUncheckedUpdateWithoutAllowancesInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UpSkillEnrollmentCreateNestedManyWithoutCertificationInput = {
    create?: XOR<UpSkillEnrollmentCreateWithoutCertificationInput, UpSkillEnrollmentUncheckedCreateWithoutCertificationInput> | UpSkillEnrollmentCreateWithoutCertificationInput[] | UpSkillEnrollmentUncheckedCreateWithoutCertificationInput[]
    connectOrCreate?: UpSkillEnrollmentCreateOrConnectWithoutCertificationInput | UpSkillEnrollmentCreateOrConnectWithoutCertificationInput[]
    createMany?: UpSkillEnrollmentCreateManyCertificationInputEnvelope
    connect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
  }

  export type UpSkillEnrollmentUncheckedCreateNestedManyWithoutCertificationInput = {
    create?: XOR<UpSkillEnrollmentCreateWithoutCertificationInput, UpSkillEnrollmentUncheckedCreateWithoutCertificationInput> | UpSkillEnrollmentCreateWithoutCertificationInput[] | UpSkillEnrollmentUncheckedCreateWithoutCertificationInput[]
    connectOrCreate?: UpSkillEnrollmentCreateOrConnectWithoutCertificationInput | UpSkillEnrollmentCreateOrConnectWithoutCertificationInput[]
    createMany?: UpSkillEnrollmentCreateManyCertificationInputEnvelope
    connect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
  }

  export type UpSkillEnrollmentUpdateManyWithoutCertificationNestedInput = {
    create?: XOR<UpSkillEnrollmentCreateWithoutCertificationInput, UpSkillEnrollmentUncheckedCreateWithoutCertificationInput> | UpSkillEnrollmentCreateWithoutCertificationInput[] | UpSkillEnrollmentUncheckedCreateWithoutCertificationInput[]
    connectOrCreate?: UpSkillEnrollmentCreateOrConnectWithoutCertificationInput | UpSkillEnrollmentCreateOrConnectWithoutCertificationInput[]
    upsert?: UpSkillEnrollmentUpsertWithWhereUniqueWithoutCertificationInput | UpSkillEnrollmentUpsertWithWhereUniqueWithoutCertificationInput[]
    createMany?: UpSkillEnrollmentCreateManyCertificationInputEnvelope
    set?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    disconnect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    delete?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    connect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    update?: UpSkillEnrollmentUpdateWithWhereUniqueWithoutCertificationInput | UpSkillEnrollmentUpdateWithWhereUniqueWithoutCertificationInput[]
    updateMany?: UpSkillEnrollmentUpdateManyWithWhereWithoutCertificationInput | UpSkillEnrollmentUpdateManyWithWhereWithoutCertificationInput[]
    deleteMany?: UpSkillEnrollmentScalarWhereInput | UpSkillEnrollmentScalarWhereInput[]
  }

  export type UpSkillEnrollmentUncheckedUpdateManyWithoutCertificationNestedInput = {
    create?: XOR<UpSkillEnrollmentCreateWithoutCertificationInput, UpSkillEnrollmentUncheckedCreateWithoutCertificationInput> | UpSkillEnrollmentCreateWithoutCertificationInput[] | UpSkillEnrollmentUncheckedCreateWithoutCertificationInput[]
    connectOrCreate?: UpSkillEnrollmentCreateOrConnectWithoutCertificationInput | UpSkillEnrollmentCreateOrConnectWithoutCertificationInput[]
    upsert?: UpSkillEnrollmentUpsertWithWhereUniqueWithoutCertificationInput | UpSkillEnrollmentUpsertWithWhereUniqueWithoutCertificationInput[]
    createMany?: UpSkillEnrollmentCreateManyCertificationInputEnvelope
    set?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    disconnect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    delete?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    connect?: UpSkillEnrollmentWhereUniqueInput | UpSkillEnrollmentWhereUniqueInput[]
    update?: UpSkillEnrollmentUpdateWithWhereUniqueWithoutCertificationInput | UpSkillEnrollmentUpdateWithWhereUniqueWithoutCertificationInput[]
    updateMany?: UpSkillEnrollmentUpdateManyWithWhereWithoutCertificationInput | UpSkillEnrollmentUpdateManyWithWhereWithoutCertificationInput[]
    deleteMany?: UpSkillEnrollmentScalarWhereInput | UpSkillEnrollmentScalarWhereInput[]
  }

  export type UpskillCertificationCreateNestedOneWithoutUpskillEnrollmentsInput = {
    create?: XOR<UpskillCertificationCreateWithoutUpskillEnrollmentsInput, UpskillCertificationUncheckedCreateWithoutUpskillEnrollmentsInput>
    connectOrCreate?: UpskillCertificationCreateOrConnectWithoutUpskillEnrollmentsInput
    connect?: UpskillCertificationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumVerificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.VerificationStatus
  }

  export type EnumInterestStatusFieldUpdateOperationsInput = {
    set?: $Enums.InterestStatus
  }

  export type UpskillCertificationUpdateOneRequiredWithoutUpskillEnrollmentsNestedInput = {
    create?: XOR<UpskillCertificationCreateWithoutUpskillEnrollmentsInput, UpskillCertificationUncheckedCreateWithoutUpskillEnrollmentsInput>
    connectOrCreate?: UpskillCertificationCreateOrConnectWithoutUpskillEnrollmentsInput
    upsert?: UpskillCertificationUpsertWithoutUpskillEnrollmentsInput
    connect?: UpskillCertificationWhereUniqueInput
    update?: XOR<XOR<UpskillCertificationUpdateToOneWithWhereWithoutUpskillEnrollmentsInput, UpskillCertificationUpdateWithoutUpskillEnrollmentsInput>, UpskillCertificationUncheckedUpdateWithoutUpskillEnrollmentsInput>
  }

  export type UserUpdateOneWithoutEnrollmentsNestedInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    upsert?: UserUpsertWithoutEnrollmentsInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEnrollmentsInput, UserUpdateWithoutEnrollmentsInput>, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
    isSet?: boolean
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumVerificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusFilter<$PrismaModel> | $Enums.VerificationStatus
  }

  export type NestedEnumInterestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InterestStatus | EnumInterestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterestStatus[] | ListEnumInterestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterestStatus[] | ListEnumInterestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterestStatusFilter<$PrismaModel> | $Enums.InterestStatus
  }

  export type NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.VerificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVerificationStatusFilter<$PrismaModel>
    _max?: NestedEnumVerificationStatusFilter<$PrismaModel>
  }

  export type NestedEnumInterestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterestStatus | EnumInterestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterestStatus[] | ListEnumInterestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterestStatus[] | ListEnumInterestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterestStatusWithAggregatesFilter<$PrismaModel> | $Enums.InterestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterestStatusFilter<$PrismaModel>
    _max?: NestedEnumInterestStatusFilter<$PrismaModel>
  }

  export type TodoCreateWithoutUserInput = {
    id?: string
    todoId?: string | null
    activity?: string | null
    description?: string | null
    status?: string | null
    priority?: string | null
    dueDate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoUncheckedCreateWithoutUserInput = {
    id?: string
    todoId?: string | null
    activity?: string | null
    description?: string | null
    status?: string | null
    priority?: string | null
    dueDate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoCreateOrConnectWithoutUserInput = {
    where: TodoWhereUniqueInput
    create: XOR<TodoCreateWithoutUserInput, TodoUncheckedCreateWithoutUserInput>
  }

  export type TodoCreateManyUserInputEnvelope = {
    data: TodoCreateManyUserInput | TodoCreateManyUserInput[]
  }

  export type AllowanceCreateWithoutUserInput = {
    id?: string
    calculationId?: string | null
    jobDesignation?: string | null
    basicPay?: number | null
    marriedStatus?: boolean | null
    distanceTravelled?: number | null
    vehicleIncluded?: InputJsonValue | null
    result?: InputJsonValue | null
    calculatedAt?: Date | string | null
  }

  export type AllowanceUncheckedCreateWithoutUserInput = {
    id?: string
    calculationId?: string | null
    jobDesignation?: string | null
    basicPay?: number | null
    marriedStatus?: boolean | null
    distanceTravelled?: number | null
    vehicleIncluded?: InputJsonValue | null
    result?: InputJsonValue | null
    calculatedAt?: Date | string | null
  }

  export type AllowanceCreateOrConnectWithoutUserInput = {
    where: AllowanceWhereUniqueInput
    create: XOR<AllowanceCreateWithoutUserInput, AllowanceUncheckedCreateWithoutUserInput>
  }

  export type AllowanceCreateManyUserInputEnvelope = {
    data: AllowanceCreateManyUserInput | AllowanceCreateManyUserInput[]
  }

  export type UpSkillEnrollmentCreateWithoutUserInput = {
    id?: string
    applicationId?: string | null
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    certification: UpskillCertificationCreateNestedOneWithoutUpskillEnrollmentsInput
  }

  export type UpSkillEnrollmentUncheckedCreateWithoutUserInput = {
    id?: string
    applicationId?: string | null
    certificationId: string
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UpSkillEnrollmentCreateOrConnectWithoutUserInput = {
    where: UpSkillEnrollmentWhereUniqueInput
    create: XOR<UpSkillEnrollmentCreateWithoutUserInput, UpSkillEnrollmentUncheckedCreateWithoutUserInput>
  }

  export type UpSkillEnrollmentCreateManyUserInputEnvelope = {
    data: UpSkillEnrollmentCreateManyUserInput | UpSkillEnrollmentCreateManyUserInput[]
  }

  export type ChatbotCreateWithoutUserInput = {
    id?: string
    sessionId: string
    query: string
    response: string
    createdAt?: Date | string
  }

  export type ChatbotUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId: string
    query: string
    response: string
    createdAt?: Date | string
  }

  export type ChatbotCreateOrConnectWithoutUserInput = {
    where: ChatbotWhereUniqueInput
    create: XOR<ChatbotCreateWithoutUserInput, ChatbotUncheckedCreateWithoutUserInput>
  }

  export type ChatbotCreateManyUserInputEnvelope = {
    data: ChatbotCreateManyUserInput | ChatbotCreateManyUserInput[]
  }

  export type TodoUpsertWithWhereUniqueWithoutUserInput = {
    where: TodoWhereUniqueInput
    update: XOR<TodoUpdateWithoutUserInput, TodoUncheckedUpdateWithoutUserInput>
    create: XOR<TodoCreateWithoutUserInput, TodoUncheckedCreateWithoutUserInput>
  }

  export type TodoUpdateWithWhereUniqueWithoutUserInput = {
    where: TodoWhereUniqueInput
    data: XOR<TodoUpdateWithoutUserInput, TodoUncheckedUpdateWithoutUserInput>
  }

  export type TodoUpdateManyWithWhereWithoutUserInput = {
    where: TodoScalarWhereInput
    data: XOR<TodoUpdateManyMutationInput, TodoUncheckedUpdateManyWithoutUserInput>
  }

  export type TodoScalarWhereInput = {
    AND?: TodoScalarWhereInput | TodoScalarWhereInput[]
    OR?: TodoScalarWhereInput[]
    NOT?: TodoScalarWhereInput | TodoScalarWhereInput[]
    id?: StringFilter<"Todo"> | string
    todoId?: StringNullableFilter<"Todo"> | string | null
    userId?: StringFilter<"Todo"> | string
    activity?: StringNullableFilter<"Todo"> | string | null
    description?: StringNullableFilter<"Todo"> | string | null
    status?: StringNullableFilter<"Todo"> | string | null
    priority?: StringNullableFilter<"Todo"> | string | null
    dueDate?: StringNullableFilter<"Todo"> | string | null
    createdAt?: DateTimeFilter<"Todo"> | Date | string
    updatedAt?: DateTimeFilter<"Todo"> | Date | string
  }

  export type AllowanceUpsertWithWhereUniqueWithoutUserInput = {
    where: AllowanceWhereUniqueInput
    update: XOR<AllowanceUpdateWithoutUserInput, AllowanceUncheckedUpdateWithoutUserInput>
    create: XOR<AllowanceCreateWithoutUserInput, AllowanceUncheckedCreateWithoutUserInput>
  }

  export type AllowanceUpdateWithWhereUniqueWithoutUserInput = {
    where: AllowanceWhereUniqueInput
    data: XOR<AllowanceUpdateWithoutUserInput, AllowanceUncheckedUpdateWithoutUserInput>
  }

  export type AllowanceUpdateManyWithWhereWithoutUserInput = {
    where: AllowanceScalarWhereInput
    data: XOR<AllowanceUpdateManyMutationInput, AllowanceUncheckedUpdateManyWithoutUserInput>
  }

  export type AllowanceScalarWhereInput = {
    AND?: AllowanceScalarWhereInput | AllowanceScalarWhereInput[]
    OR?: AllowanceScalarWhereInput[]
    NOT?: AllowanceScalarWhereInput | AllowanceScalarWhereInput[]
    id?: StringFilter<"Allowance"> | string
    calculationId?: StringNullableFilter<"Allowance"> | string | null
    userId?: StringFilter<"Allowance"> | string
    jobDesignation?: StringNullableFilter<"Allowance"> | string | null
    basicPay?: FloatNullableFilter<"Allowance"> | number | null
    marriedStatus?: BoolNullableFilter<"Allowance"> | boolean | null
    distanceTravelled?: FloatNullableFilter<"Allowance"> | number | null
    vehicleIncluded?: JsonNullableFilter<"Allowance">
    result?: JsonNullableFilter<"Allowance">
    calculatedAt?: DateTimeNullableFilter<"Allowance"> | Date | string | null
  }

  export type UpSkillEnrollmentUpsertWithWhereUniqueWithoutUserInput = {
    where: UpSkillEnrollmentWhereUniqueInput
    update: XOR<UpSkillEnrollmentUpdateWithoutUserInput, UpSkillEnrollmentUncheckedUpdateWithoutUserInput>
    create: XOR<UpSkillEnrollmentCreateWithoutUserInput, UpSkillEnrollmentUncheckedCreateWithoutUserInput>
  }

  export type UpSkillEnrollmentUpdateWithWhereUniqueWithoutUserInput = {
    where: UpSkillEnrollmentWhereUniqueInput
    data: XOR<UpSkillEnrollmentUpdateWithoutUserInput, UpSkillEnrollmentUncheckedUpdateWithoutUserInput>
  }

  export type UpSkillEnrollmentUpdateManyWithWhereWithoutUserInput = {
    where: UpSkillEnrollmentScalarWhereInput
    data: XOR<UpSkillEnrollmentUpdateManyMutationInput, UpSkillEnrollmentUncheckedUpdateManyWithoutUserInput>
  }

  export type UpSkillEnrollmentScalarWhereInput = {
    AND?: UpSkillEnrollmentScalarWhereInput | UpSkillEnrollmentScalarWhereInput[]
    OR?: UpSkillEnrollmentScalarWhereInput[]
    NOT?: UpSkillEnrollmentScalarWhereInput | UpSkillEnrollmentScalarWhereInput[]
    id?: StringFilter<"UpSkillEnrollment"> | string
    applicationId?: StringNullableFilter<"UpSkillEnrollment"> | string | null
    certificationId?: StringFilter<"UpSkillEnrollment"> | string
    name?: StringFilter<"UpSkillEnrollment"> | string
    email?: StringFilter<"UpSkillEnrollment"> | string
    phone?: StringFilter<"UpSkillEnrollment"> | string
    verificationStatus?: EnumVerificationStatusFilter<"UpSkillEnrollment"> | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFilter<"UpSkillEnrollment"> | $Enums.InterestStatus
    description?: StringNullableFilter<"UpSkillEnrollment"> | string | null
    createdAt?: DateTimeFilter<"UpSkillEnrollment"> | Date | string
    updatedAt?: DateTimeFilter<"UpSkillEnrollment"> | Date | string
    userId?: StringNullableFilter<"UpSkillEnrollment"> | string | null
  }

  export type ChatbotUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatbotWhereUniqueInput
    update: XOR<ChatbotUpdateWithoutUserInput, ChatbotUncheckedUpdateWithoutUserInput>
    create: XOR<ChatbotCreateWithoutUserInput, ChatbotUncheckedCreateWithoutUserInput>
  }

  export type ChatbotUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatbotWhereUniqueInput
    data: XOR<ChatbotUpdateWithoutUserInput, ChatbotUncheckedUpdateWithoutUserInput>
  }

  export type ChatbotUpdateManyWithWhereWithoutUserInput = {
    where: ChatbotScalarWhereInput
    data: XOR<ChatbotUpdateManyMutationInput, ChatbotUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatbotScalarWhereInput = {
    AND?: ChatbotScalarWhereInput | ChatbotScalarWhereInput[]
    OR?: ChatbotScalarWhereInput[]
    NOT?: ChatbotScalarWhereInput | ChatbotScalarWhereInput[]
    id?: StringFilter<"Chatbot"> | string
    userId?: StringNullableFilter<"Chatbot"> | string | null
    sessionId?: StringFilter<"Chatbot"> | string
    query?: StringFilter<"Chatbot"> | string
    response?: StringFilter<"Chatbot"> | string
    createdAt?: DateTimeFilter<"Chatbot"> | Date | string
  }

  export type UserCreateWithoutChatbotsInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todos?: TodoCreateNestedManyWithoutUserInput
    allowances?: AllowanceCreateNestedManyWithoutUserInput
    enrollments?: UpSkillEnrollmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatbotsInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todos?: TodoUncheckedCreateNestedManyWithoutUserInput
    allowances?: AllowanceUncheckedCreateNestedManyWithoutUserInput
    enrollments?: UpSkillEnrollmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatbotsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatbotsInput, UserUncheckedCreateWithoutChatbotsInput>
  }

  export type UserUpsertWithoutChatbotsInput = {
    update: XOR<UserUpdateWithoutChatbotsInput, UserUncheckedUpdateWithoutChatbotsInput>
    create: XOR<UserCreateWithoutChatbotsInput, UserUncheckedCreateWithoutChatbotsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatbotsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatbotsInput, UserUncheckedUpdateWithoutChatbotsInput>
  }

  export type UserUpdateWithoutChatbotsInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todos?: TodoUpdateManyWithoutUserNestedInput
    allowances?: AllowanceUpdateManyWithoutUserNestedInput
    enrollments?: UpSkillEnrollmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatbotsInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todos?: TodoUncheckedUpdateManyWithoutUserNestedInput
    allowances?: AllowanceUncheckedUpdateManyWithoutUserNestedInput
    enrollments?: UpSkillEnrollmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTodosInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowances?: AllowanceCreateNestedManyWithoutUserInput
    enrollments?: UpSkillEnrollmentCreateNestedManyWithoutUserInput
    chatbots?: ChatbotCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTodosInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allowances?: AllowanceUncheckedCreateNestedManyWithoutUserInput
    enrollments?: UpSkillEnrollmentUncheckedCreateNestedManyWithoutUserInput
    chatbots?: ChatbotUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTodosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTodosInput, UserUncheckedCreateWithoutTodosInput>
  }

  export type UserUpsertWithoutTodosInput = {
    update: XOR<UserUpdateWithoutTodosInput, UserUncheckedUpdateWithoutTodosInput>
    create: XOR<UserCreateWithoutTodosInput, UserUncheckedCreateWithoutTodosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTodosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTodosInput, UserUncheckedUpdateWithoutTodosInput>
  }

  export type UserUpdateWithoutTodosInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowances?: AllowanceUpdateManyWithoutUserNestedInput
    enrollments?: UpSkillEnrollmentUpdateManyWithoutUserNestedInput
    chatbots?: ChatbotUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTodosInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowances?: AllowanceUncheckedUpdateManyWithoutUserNestedInput
    enrollments?: UpSkillEnrollmentUncheckedUpdateManyWithoutUserNestedInput
    chatbots?: ChatbotUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAllowancesInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todos?: TodoCreateNestedManyWithoutUserInput
    enrollments?: UpSkillEnrollmentCreateNestedManyWithoutUserInput
    chatbots?: ChatbotCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAllowancesInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todos?: TodoUncheckedCreateNestedManyWithoutUserInput
    enrollments?: UpSkillEnrollmentUncheckedCreateNestedManyWithoutUserInput
    chatbots?: ChatbotUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAllowancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAllowancesInput, UserUncheckedCreateWithoutAllowancesInput>
  }

  export type UserUpsertWithoutAllowancesInput = {
    update: XOR<UserUpdateWithoutAllowancesInput, UserUncheckedUpdateWithoutAllowancesInput>
    create: XOR<UserCreateWithoutAllowancesInput, UserUncheckedCreateWithoutAllowancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAllowancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAllowancesInput, UserUncheckedUpdateWithoutAllowancesInput>
  }

  export type UserUpdateWithoutAllowancesInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todos?: TodoUpdateManyWithoutUserNestedInput
    enrollments?: UpSkillEnrollmentUpdateManyWithoutUserNestedInput
    chatbots?: ChatbotUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAllowancesInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todos?: TodoUncheckedUpdateManyWithoutUserNestedInput
    enrollments?: UpSkillEnrollmentUncheckedUpdateManyWithoutUserNestedInput
    chatbots?: ChatbotUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UpSkillEnrollmentCreateWithoutCertificationInput = {
    id?: string
    applicationId?: string | null
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutEnrollmentsInput
  }

  export type UpSkillEnrollmentUncheckedCreateWithoutCertificationInput = {
    id?: string
    applicationId?: string | null
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type UpSkillEnrollmentCreateOrConnectWithoutCertificationInput = {
    where: UpSkillEnrollmentWhereUniqueInput
    create: XOR<UpSkillEnrollmentCreateWithoutCertificationInput, UpSkillEnrollmentUncheckedCreateWithoutCertificationInput>
  }

  export type UpSkillEnrollmentCreateManyCertificationInputEnvelope = {
    data: UpSkillEnrollmentCreateManyCertificationInput | UpSkillEnrollmentCreateManyCertificationInput[]
  }

  export type UpSkillEnrollmentUpsertWithWhereUniqueWithoutCertificationInput = {
    where: UpSkillEnrollmentWhereUniqueInput
    update: XOR<UpSkillEnrollmentUpdateWithoutCertificationInput, UpSkillEnrollmentUncheckedUpdateWithoutCertificationInput>
    create: XOR<UpSkillEnrollmentCreateWithoutCertificationInput, UpSkillEnrollmentUncheckedCreateWithoutCertificationInput>
  }

  export type UpSkillEnrollmentUpdateWithWhereUniqueWithoutCertificationInput = {
    where: UpSkillEnrollmentWhereUniqueInput
    data: XOR<UpSkillEnrollmentUpdateWithoutCertificationInput, UpSkillEnrollmentUncheckedUpdateWithoutCertificationInput>
  }

  export type UpSkillEnrollmentUpdateManyWithWhereWithoutCertificationInput = {
    where: UpSkillEnrollmentScalarWhereInput
    data: XOR<UpSkillEnrollmentUpdateManyMutationInput, UpSkillEnrollmentUncheckedUpdateManyWithoutCertificationInput>
  }

  export type UpskillCertificationCreateWithoutUpskillEnrollmentsInput = {
    id?: string
    certificationId?: string
    type?: string | null
    course: string
    price: number
    description: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tax?: number | null
    discount?: number | null
  }

  export type UpskillCertificationUncheckedCreateWithoutUpskillEnrollmentsInput = {
    id?: string
    certificationId?: string
    type?: string | null
    course: string
    price: number
    description: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tax?: number | null
    discount?: number | null
  }

  export type UpskillCertificationCreateOrConnectWithoutUpskillEnrollmentsInput = {
    where: UpskillCertificationWhereUniqueInput
    create: XOR<UpskillCertificationCreateWithoutUpskillEnrollmentsInput, UpskillCertificationUncheckedCreateWithoutUpskillEnrollmentsInput>
  }

  export type UserCreateWithoutEnrollmentsInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todos?: TodoCreateNestedManyWithoutUserInput
    allowances?: AllowanceCreateNestedManyWithoutUserInput
    chatbots?: ChatbotCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    userId?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    armyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todos?: TodoUncheckedCreateNestedManyWithoutUserInput
    allowances?: AllowanceUncheckedCreateNestedManyWithoutUserInput
    chatbots?: ChatbotUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEnrollmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
  }

  export type UpskillCertificationUpsertWithoutUpskillEnrollmentsInput = {
    update: XOR<UpskillCertificationUpdateWithoutUpskillEnrollmentsInput, UpskillCertificationUncheckedUpdateWithoutUpskillEnrollmentsInput>
    create: XOR<UpskillCertificationCreateWithoutUpskillEnrollmentsInput, UpskillCertificationUncheckedCreateWithoutUpskillEnrollmentsInput>
    where?: UpskillCertificationWhereInput
  }

  export type UpskillCertificationUpdateToOneWithWhereWithoutUpskillEnrollmentsInput = {
    where?: UpskillCertificationWhereInput
    data: XOR<UpskillCertificationUpdateWithoutUpskillEnrollmentsInput, UpskillCertificationUncheckedUpdateWithoutUpskillEnrollmentsInput>
  }

  export type UpskillCertificationUpdateWithoutUpskillEnrollmentsInput = {
    certificationId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    course?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UpskillCertificationUncheckedUpdateWithoutUpskillEnrollmentsInput = {
    certificationId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    course?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithoutEnrollmentsInput = {
    update: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateWithoutEnrollmentsInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todos?: TodoUpdateManyWithoutUserNestedInput
    allowances?: AllowanceUpdateManyWithoutUserNestedInput
    chatbots?: ChatbotUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrollmentsInput = {
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    armyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todos?: TodoUncheckedUpdateManyWithoutUserNestedInput
    allowances?: AllowanceUncheckedUpdateManyWithoutUserNestedInput
    chatbots?: ChatbotUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TodoCreateManyUserInput = {
    id?: string
    todoId?: string | null
    activity?: string | null
    description?: string | null
    status?: string | null
    priority?: string | null
    dueDate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AllowanceCreateManyUserInput = {
    id?: string
    calculationId?: string | null
    jobDesignation?: string | null
    basicPay?: number | null
    marriedStatus?: boolean | null
    distanceTravelled?: number | null
    vehicleIncluded?: InputJsonValue | null
    result?: InputJsonValue | null
    calculatedAt?: Date | string | null
  }

  export type UpSkillEnrollmentCreateManyUserInput = {
    id?: string
    applicationId?: string | null
    certificationId: string
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatbotCreateManyUserInput = {
    id?: string
    sessionId: string
    query: string
    response: string
    createdAt?: Date | string
  }

  export type TodoUpdateWithoutUserInput = {
    todoId?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoUncheckedUpdateWithoutUserInput = {
    todoId?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoUncheckedUpdateManyWithoutUserInput = {
    todoId?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllowanceUpdateWithoutUserInput = {
    calculationId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDesignation?: NullableStringFieldUpdateOperationsInput | string | null
    basicPay?: NullableFloatFieldUpdateOperationsInput | number | null
    marriedStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    distanceTravelled?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleIncluded?: InputJsonValue | InputJsonValue | null
    result?: InputJsonValue | InputJsonValue | null
    calculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AllowanceUncheckedUpdateWithoutUserInput = {
    calculationId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDesignation?: NullableStringFieldUpdateOperationsInput | string | null
    basicPay?: NullableFloatFieldUpdateOperationsInput | number | null
    marriedStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    distanceTravelled?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleIncluded?: InputJsonValue | InputJsonValue | null
    result?: InputJsonValue | InputJsonValue | null
    calculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AllowanceUncheckedUpdateManyWithoutUserInput = {
    calculationId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDesignation?: NullableStringFieldUpdateOperationsInput | string | null
    basicPay?: NullableFloatFieldUpdateOperationsInput | number | null
    marriedStatus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    distanceTravelled?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleIncluded?: InputJsonValue | InputJsonValue | null
    result?: InputJsonValue | InputJsonValue | null
    calculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UpSkillEnrollmentUpdateWithoutUserInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certification?: UpskillCertificationUpdateOneRequiredWithoutUpskillEnrollmentsNestedInput
  }

  export type UpSkillEnrollmentUncheckedUpdateWithoutUserInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    certificationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UpSkillEnrollmentUncheckedUpdateManyWithoutUserInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    certificationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotUpdateWithoutUserInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotUncheckedUpdateWithoutUserInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotUncheckedUpdateManyWithoutUserInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    response?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UpSkillEnrollmentCreateManyCertificationInput = {
    id?: string
    applicationId?: string | null
    name: string
    email: string
    phone: string
    verificationStatus?: $Enums.VerificationStatus
    interestStatus?: $Enums.InterestStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type UpSkillEnrollmentUpdateWithoutCertificationInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutEnrollmentsNestedInput
  }

  export type UpSkillEnrollmentUncheckedUpdateWithoutCertificationInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UpSkillEnrollmentUncheckedUpdateManyWithoutCertificationInput = {
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    interestStatus?: EnumInterestStatusFieldUpdateOperationsInput | $Enums.InterestStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}